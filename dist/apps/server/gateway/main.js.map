{"version":3,"file":"main.js","mappings":"+BAAAA,EAAOC,QAAUC,QAAQ,iB,MCAzBF,EAAOC,QAAUC,QAAQ,e,6FCAzB,OACA,OACA,QACA,QACA,QAOO,IAAMC,EAAN,MAAMA,YAAA,EAAAA,UAAAA,E,YAAAA,EAAS,eALrB,IAAAC,QAAO,CACNC,QAAS,CAAC,EAAAC,WAAY,EAAAC,WAAY,EAAAC,cAAe,EAAAC,oBACjDC,YAAa,GACbC,UAAW,MAEAR,E,MCXbH,EAAOC,QAAUC,QAAQ,Q,8FCAzB,OACA,OACA,QAOO,IAAMI,EAAN,MAAMA,aAAA,EAAAA,WAAAA,E,aAAAA,EAAU,eALtB,IAAAF,QAAO,CACNO,UAAW,GACXD,YAAa,CAAC,EAAAE,gBACdP,QAAQ,CAAC,EAAAQ,qBAEEP,E,4GCTb,OACA,OACA,OACA,OACA,QAGO,IAAMM,EAAN,MAAMA,eACX,WAAAE,CAEUC,GAAA,KAAAA,WAAAA,CACP,CAGH,UAAAC,CAAmBC,GACjB,OAAOC,KAAKH,WACTI,KAAK,CAAEC,IAAK,EAAAC,qBAAqBC,QAAUL,GAC3CM,MACC,IAAAC,aAAYC,IACV,EAAAC,OAAOD,MAAM,sCACNA,MAET,IAAAE,MAAKC,IACH,EAAAF,OAAOG,IAAI,4CAA6CD,EAAK,IAGrE,CAGA,MAAAE,CAAeb,GACb,OAAOC,KAAKH,WACTI,KAAK,CAAEC,IAAK,EAAAC,qBAAqBU,SAAWd,GAC5CM,MACC,IAAAC,aAAYC,IACV,EAAAC,OAAOD,MAAM,sCACNA,MAET,IAAAE,MAAKC,IACH,EAAAF,OAAOG,IAAI,4CAA6CD,EAAK,IAGrE,GAlCW,EAAAhB,eAAAA,EAOX,eADC,IAAAoB,MAAK,eACM,iBAAAC,S,uEAAgC,mB,OAAA,IAAhB,EAAAC,kBAAA,EAAAA,kBAAgB,W,yEAe5C,eADC,IAAAF,MAAK,gBACE,iBAAAC,S,uEAAgC,mB,OAAA,IAAhB,EAAAC,kBAAA,EAAAA,kBAAgB,W,sFAtB7BtB,EAAc,eAD1B,IAAAuB,YAAW,QAGP,iBAAAC,QAAO,iB,kCACuB,mB,OAAA,IAAX,EAAAC,aAAA,EAAAA,aAAW,YAHtBzB,E,MCPbZ,EAAOC,QAAUC,QAAQ,wB,MCAzBF,EAAOC,QAAUC,QAAQ,O,0ECAzB,wBACA,wBACA,uB,kECFA,qB,qHCAA,cAEMoC,EAAeC,OAAOC,OAAO,CACjCC,KAAM,GAAG,EAAAC,oBAAoBC,2BAC7BC,QAAS,GAAG,EAAAF,oBAAoBC,gCAGrB,EAAAtB,qBAAuBkB,OAAOC,OAAO,CAChDlB,OAAQ,GAAGgB,EAAaG,cACxBI,OAAQ,GAAGP,EAAaG,cACxBK,OAAQ,GAAGR,EAAaG,cAExBV,QAAS,GAAGO,EAAaG,eACzBM,cAAe,GAAGT,EAAaG,uBAGpB,EAAAO,wBAA0BT,OAAOC,OAAO,CACnDK,OAAQ,GAAGP,EAAaM,iBACxBK,WAAY,GAAGX,EAAaM,qBAC5BM,cAAe,GAAGZ,EAAaM,wBAC/BO,iBAAkB,GAAGb,EAAaM,2B,wFCpBvB,EAAAF,oBAAsBH,OAAOC,OAAO,CAC/CG,aAAc,eACdS,aAAc,gB,kECFhB,qB,oJCAA,cAEMC,EAAoBd,OAAOC,OAAO,CACtCc,KAAM,GAAG,EAAAZ,oBAAoBU,2BAC7BG,QAAS,GAAG,EAAAb,oBAAoBU,8BAChCI,aAAe,GAAG,EAAAd,oBAAoBU,qCAG3B,EAAAK,qBAAuBlB,OAAOC,OAAO,CAChDkB,aAAc,GAAGL,EAAkBC,oBACnCR,OAAQ,GAAGO,EAAkBC,cAC7BK,OAAQ,GAAGN,EAAkBC,cAE7BM,YAAa,GAAGP,EAAkBC,qBAGvB,EAAAO,6BAA+BtB,OAAOC,OAAO,CACxDlB,OAAQ,GAAG+B,EAAkBG,sBAC7BV,OAAQ,GAAGO,EAAkBG,sBAC7BG,OAAQ,GAAGN,EAAkBG,sBAC7BM,eAAgB,GAAGT,EAAkBG,+BAG1B,EAAAO,wBAA0BxB,OAAOC,OAAO,CACnDlB,OAAQ,GAAG+B,EAAkBE,iBAC7BS,KAAM,GAAGX,EAAkBE,eAC3BU,MAAO,GAAGZ,EAAkBE,iB,0EC1B9B,wBACA,uB,qFCDA,yBAAarB,kB,qFCAb,yBAAagC,kB,kECAb,qB,oGCAA,OACA,OA0BO,IAAMrD,EAAN,MAAMA,mBAAA,EAAAA,iBAAAA,E,mBAAAA,EAAgB,eAxB5B,IAAAT,QAAO,CACNC,QAAS,CACP,EAAA8D,cAAcC,SAAS,CACrB,CACEC,KAAM,eACNC,UAAW,EAAAC,UAAUC,KACrBC,QAAS,CACPC,QAAS,CAACC,QAAQC,IAAc,eAKxC3E,QAAS,CACP,EAAAkE,cAAcC,SAAS,CACrB,CACEC,KAAM,eACNC,UAAW,EAAAC,UAAUC,KACrBC,QAAS,CACPC,QAAS,CAACC,QAAQC,IAAc,kBAM7B/D,E,8FC3Bb,OACA,QACA,QAMO,IAAMN,EAAN,MAAMA,aAAA,EAAAA,WAAAA,E,aAAAA,EAAU,eAJtB,IAAAH,QAAO,CACNC,QAAS,CAAC,EAAAQ,kBACVF,UAAW,CAAC,EAAAkE,gBAEDtE,E,yHCRb,OACA,QAOA,QACA,QAIA,OACA,OACA,OACA,QAKA,QACA,QAGO,IAAMsE,EAAN,MAAMA,YAIX,WAAA/D,CAEE,GAAQ,KAAAC,WAAAA,EAGF,KAAA+D,cAAuC,IAAIC,IAE3C,KAAAC,UAAmC,IAAID,IACvC,KAAAE,kBAA2C,IAAIF,IAE/C,KAAAG,YACN,IAAIH,GARH,CAUH,gBAAAI,CAAiBC,GACf,EAAA1D,OAAOG,IAAI,gCAAgCuD,EAAOC,MAClDnE,KAAK4D,cAAcQ,IAAIF,EAAOC,GAAI,GACpC,CAEA,gBAAAE,CAAiBH,GACf,EAAA1D,OAAOG,IAAI,mCAAmCuD,EAAOC,MACrDnE,KAAK4D,cAAcU,OAAOJ,EAAOC,IACjCI,MAAMC,KAAKxE,KAAKgE,aAAaS,SAASC,IAChCA,EAAE,GAAGC,UAAYT,EAAOC,KAC1BnE,KAAKgE,YAAYM,OAAOI,EAAE,GAAGE,QAC7B5E,KAAK6E,iCACHX,EACA,EAAAY,4BAA4BC,mBAE9B,EAAAvE,OAAOG,IAAI,2BAA2B+D,EAAE,GAAGE,UAC7C,IAGF,EAAApE,OAAOG,IAAI,kCAAkCX,KAAKgE,YAAYgB,QAC9D,EAAAxE,OAAOG,IAAI,gCAAgCX,KAAK8D,UAAUkB,OAC5D,CAGA,gBAAAC,CAAiBf,EAAgBU,GAC/B,EAAApE,OAAOG,IAAI,2BAA2BiE,KACtC5E,KAAKgE,YAAYI,IAAIQ,EAAQ,CAAEA,SAAQD,SAAUT,EAAOC,KACxDnE,KAAKkF,4BACHhB,EACA,EAAAY,4BAA4BC,kBAAoB,KAAOH,EAE3D,CAGA,cAAAO,CAAejB,GAAgB,OAAEkB,IAC/B,EAAA5E,OAAOG,IAAI,qBAAqBuD,EAAOC,oBAAoBiB,KAC3DlB,EAAOmB,KAAKD,GACZ,MAAME,EAAQtF,KAAK4D,cAAc2B,IAAIrB,EAAOC,KAAO,GACnDnE,KAAK4D,cAAcQ,IAAIF,EAAOC,GAAI,IAAImB,EAAOF,IAC7ClB,EAAOsB,GAAGJ,GAAQK,KAAK,EAAAX,4BAA4BY,YAAa,CAC9DN,WAGFpF,KAAK2F,oBAAoBzB,EAAQkB,EACnC,CAGA,eAAAQ,CAAgB1B,GAAgB,OAAEkB,IAChClB,EAAO2B,MAAMT,GACb,MAAME,EAAQtF,KAAK4D,cAAc2B,IAAIrB,EAAOC,KAAO,GACnDnE,KAAK4D,cAAcQ,IACjBF,EAAOC,GACPmB,EAAMQ,QAAQC,GAAMA,IAAMX,KAE5BlB,EAAOsB,GAAGJ,GAAQK,KAAK,EAAAX,4BAA4BkB,UAAW,CAC5DZ,WAEFpF,KAAKiG,yBAAyB/B,EAAQkB,GACtC,EAAA5E,OAAOG,IAAI,qBAAqBuD,EAAOC,oBAAoBiB,IAC7D,CAGA,iBAAAc,CAAkBhC,EAAgBiC,GACZA,EAAMC,aAAaC,OAAS,EAE9CrG,KAAKsG,uBAAuBH,GAG9BnG,KAAKuG,0BAA0BrC,EAAQiC,EACzC,CAGA,qBAAAK,CACEtC,GACA,OAAEkB,EAAM,eAAEqB,EAAc,SAAEC,IAE1B,EAAAlG,OAAOG,IACL,+BAA+BuD,EAAOC,cAAciB,MAAWqB,KAEjE,MAAME,EAAW,CACfvB,SACAqB,iBACAC,SAAUA,EACV/B,SAAUT,EAAOC,IAEnBnE,KAAKH,WACF4F,KAAK,EAAAlD,qBAAqBG,YAAa,CAAC,GACxCrC,MACC,IAAAC,aAAYC,IACVP,KAAK4G,OACFpB,GAAGJ,GACHK,KAAK,EAAAoB,oBAAoBC,sBAAuBH,GAC5C,EAAAI,UAET,IAAAtG,MAAKuG,IACHhH,KAAK4G,OACFpB,GAAGJ,GACHK,KAAK,EAAAoB,oBAAoBI,gBAAiBN,EAAS,KAGzDO,WACL,CAEQ,yBAAAX,CACNrC,EACAiC,GAEA,MAAMgB,EAAahB,EAAMC,YAAY,GAIrC,OAHA,EAAA5F,OAAOG,IACL,2BAA2BuD,EAAOC,cAAcgC,EAAMf,WAAWe,EAAMiB,wBAAwBD,KAEzFnH,KAAKqH,oBAAoBF,EAAYhB,EAAMf,SACjD,KAAK,EAAAkC,qBAAqBC,OACxBvH,KAAKwH,wBAAwBrB,GAC7B,MACF,KAAK,EAAAmB,qBAAqBG,QACxBzH,KAAK0H,6BAA6BvB,GAClC,EAAA3F,OAAOmH,KAAK,iDACZ,MACF,KAAK,EAAAC,qBAAqBC,kBACxB7H,KAAK8H,6BAA6B3B,GAClC,EAAA3F,OAAOmH,KAAK,qDAGlB,CAGQ,uBAAAH,CAAwBzH,GAC9BgI,QAAQpH,IAAI,2BACZX,KAAKH,WACF4F,KAAK,EAAAlD,qBAAqBC,aAAczC,GACxCM,MACC,IAAAC,aAAYC,IACVP,KAAK4G,OACFpB,GAAGzF,EAAQqF,QACXK,KAAK,EAAAoB,oBAAoBmB,kBAAmBjI,GACxC,EAAAgH,UAET,IAAAtG,MAAI,KACFT,KAAK4G,OAAOpB,GAAGzF,EAAQqF,QAAQK,KAAK,EAAAoB,oBAAoBoB,YAAa,IAChElI,EACHqH,QAASrH,EAAQqH,SACjB,KAGLF,WACL,CAGQ,4BAAAQ,CAA6B3H,GACnCgI,QAAQpH,IAAI,+BACd,CAGQ,4BAAAmH,CAA6B/H,GACnCC,KAAKH,WACF4F,KAAK,EAAAlD,qBAAqBC,aAAczC,GACxCM,MACC,IAAAC,aAAYC,IACVP,KAAK4G,OACFpB,GAAGzF,EAAQqF,QACXK,KAAK,EAAAoB,oBAAoBmB,kBAAmBjI,GACxC,EAAAgH,UAET,IAAAtG,MAAI,KACF,MAAM2E,EACJ,EAAAN,4BAA4BC,kBAC5B,KACAhF,EAAQqG,YAAY,GACtBpG,KAAK4G,OAAOnB,KAAKL,EAAQ,CACvBgC,QAASrH,EAAQqH,QACjBc,eAAgBnI,EAAQqF,OACxBsB,SAAU3G,EAAQ2G,SAClBS,WAAYpH,EAAQqG,YAAY,GAChC+B,QAAQ,EACRC,WAAW,IAAIC,MAAOC,eACtB,KAGLpB,WACL,CAEQ,sBAAAZ,CAAuBvG,GAC7BgI,QAAQpH,IAAI,2BAA4BZ,EAC1C,CAEQ,YAAAwI,CAAa3D,GACnB,QAAS5E,KAAKgE,YAAYuB,IAAIX,EAChC,CAEQ,mBAAAe,CAAoBzB,EAAgBkB,GAC1C,GAAKpF,KAAK8D,UAAU0E,IAAIpD,GAEjB,CACL,MAAMqD,EAAY,IAAIzI,KAAK8D,UAAUyB,IAAIH,GAASlB,EAAOC,IACzDnE,KAAK8D,UAAUM,IAAIgB,EAAQqD,EAC7B,MAJEzI,KAAK8D,UAAUM,IAAIgB,EAAQ,CAAClB,EAAOC,IAKvC,CAEQ,wBAAA8B,CAAyB/B,EAAgBkB,GAC/C,IAAKpF,KAAK8D,UAAU0E,IAAIpD,GACtB,OAEF2C,QAAQpH,IAAI,mBAAoBuD,EAAOC,IACvC,MAAMsE,EAAYzI,KAAK8D,UACpByB,IAAIH,GACJU,QAAQnB,GAAaA,IAAaT,EAAOC,KAC5C4D,QAAQpH,IAAI,cAAe8H,GAC3BzI,KAAK8D,UAAUM,IAAIgB,EAAQqD,GAC3BV,QAAQpH,IAAI,6BAA8BX,KAAK8D,UAAU4E,UAC3D,CAEQ,2BAAAxD,CAA4BhB,EAAgBkB,GAClD,GAAKpF,KAAK+D,kBAAkByE,IAAIpD,GAEzB,CACL,MAAMqD,EAAY,IAAIzI,KAAK+D,kBAAkBwB,IAAIH,GAASlB,EAAOC,IACjEnE,KAAK+D,kBAAkBK,IAAIgB,EAAQqD,EACrC,MAJEzI,KAAK+D,kBAAkBK,IAAIgB,EAAQ,CAAClB,EAAOC,KAK7C,EAAA3D,OAAOG,IAAI,0CAA0CyE,IACvD,CAEQ,gCAAAP,CAAiCX,EAAgBkB,GACvD,IAAKpF,KAAK+D,kBAAkByE,IAAIpD,GAC9B,OAEF,EAAA5E,OAAOG,IAAI,6CAA6CyE,KACxD,MAAMqD,EAAYzI,KAAK+D,kBACpBwB,IAAIH,GACJU,QAAQnB,GAAaA,IAAaT,EAAOC,KAC5CnE,KAAK+D,kBAAkBK,IAAIgB,EAAQqD,EACrC,CAEQ,mBAAApB,CACNzC,EACAQ,GAEA,MAAMuD,EAAQ3I,KAAKuI,aAAa3D,GAC1BgE,EAAe5I,KAAK8D,UAAUyB,IAAIH,IAASiB,OAC3CwC,EAAmC,GAAhBD,EAIzB,OAHAb,QAAQpH,IAAI,iBAAkBiI,GAC9Bb,QAAQpH,IAAI,UAAWgI,GACvBZ,QAAQpH,IAAI,qBAAsBkI,GAC7BF,EACDE,EAAyB,EAAAjB,qBAAqBC,kBAC3Cc,GAAS,EAAArB,qBAAqBC,OAFlB,EAAAD,qBAAqBG,OAG1C,GAvQW,EAAA9D,YAAAA,EAEH,eADP,IAAAmF,mB,2BACqB,mB,OAAA,IAAN,EAAAC,QAAA,EAAAA,QAAM,W,6BAuCtB,eADC,IAAAC,kBAAiB,EAAAlE,4BAA4ByC,Q,uEACf,mB,OAAA,IAAN,EAAA0B,QAAA,EAAAA,QAAM,kB,+EAU/B,eADC,IAAAD,kBAAiB,EAAAlE,4BAA4BoE,W,uEACjB,mB,OAAA,IAAN,EAAAD,QAAA,EAAAA,QAAM,SAAyB,mBAAzB,OAAyB,IAAX,EAAAE,aAAA,EAAAA,aAAW,W,6EAatD,eADC,IAAAH,kBAAiB,EAAAlE,4BAA4BsE,Y,uEAChB,mB,OAAA,IAAN,EAAAH,QAAA,EAAAA,QAAM,SAA0B,mBAA1B,OAA0B,IAAZ,EAAAI,cAAA,EAAAA,cAAY,W,8EAexD,eADC,IAAAL,kBAAiB,EAAAnC,oBAAoBrE,c,uEACN,mB,OAAA,IAAN,EAAAyG,QAAA,EAAAA,QAAM,SAAqC,mBAArC,OAAqC,IAA5B,EAAAK,8BAAA,EAAAA,8BAA4B,W,gFAUrE,eADC,IAAAN,kBAAiB,EAAAnC,oBAAoB0C,kB,uEAEtB,mB,OAAA,IAAN,EAAAN,QAAA,EAAAA,QAAM,SAC6C,mBAD7C,OAC6C,IAArB,EAAAO,uBAAA,EAAAA,uBAAqB,W,kGA3FlD7F,EAAW,eADvB,IAAA8F,oBAMI,iBAAAvI,QAAO,iB,kCACuB,mB,OAAA,IAAX,EAAAC,aAAA,EAAAA,aAAW,YANtBwC,E,MCzBb7E,EAAOC,QAAUC,QAAQ,qB,MCAzBF,EAAOC,QAAUC,QAAQ,Y,0ECAzB,wBACA,wBACA,uB,wFCFa,EAAA6H,oBAAsBxF,OAAOC,OAAO,CAC/CkB,aAAc,eACdwF,kBAAmB,oBAEnBC,YAAa,cACbsB,iBAAkB,mBAClBzC,sBAAuB,wBACvBG,gBAAiB,kBAEjByC,iBAAkB,oB,gGCTP,EAAA5E,4BAA8BzD,OAAOC,OAAO,CACvDiG,OAAQ,SACRoC,kBAAmB,oBACnBC,qBAAsB,uBACtBV,UAAW,YACXxD,YAAa,cACb0D,WAAY,aACZpD,UAAW,YACX6D,iBAAkB,mBAClB9E,kBAAmB,qB,gGCTR,EAAA+E,4BAA8BzI,OAAOC,OAAO,CACrDyI,WAAY,aACZC,wBAAyB,2B,0ECF7B,wBACA,wBACA,wBACA,uB,qFCHA,yBAAaC,kB,qFCAb,yBAAaC,kB,oHCAb,yBAAaC,mBAKb,qCAAab,8B,0FCLb,8BAAaE,uB,0ECAb,wBACA,wBACA,wBACA,uB,0FCHA,8BAAaY,uB,0FCAb,8BAAaC,uB,gFCAb,oBAAalB,a,iFCAb,qBAAaE,c,UCAb,IAAY/B,EAKAM,E,sGALZ,SAAYN,GACV,kBACA,mBACD,CAHD,CAAYA,IAAoB,uBAApBA,EAAoB,KAKhC,SAAYM,GACV,gBACA,uCACD,CAHD,CAAYA,IAAoB,uBAApBA,EAAoB,I,iGCLhC,OACA,QACA,QAOO,IAAMtI,EAAN,MAAMA,gBAAA,EAAAA,cAAAA,E,gBAAAA,EAAa,eALzB,IAAAJ,QAAO,CACNO,UAAW,GACXD,YAAa,CAAC,EAAA8K,mBACdnL,QAAS,CAAC,EAAAQ,qBAECL,E,iHCTb,OASA,OACA,OACA,OACA,QAOO,IAAMgL,EAAN,MAAMA,kBACX,WAAA1K,CAEUC,GAAA,KAAAA,WAAAA,CACP,CAGH,aAAA0K,CAAsBxK,GACpB,OAAOC,KAAKH,WACTI,KAAK,CAAEC,IAAK,EAAA4B,wBAAwBH,QAAU5B,GAC9CM,MACC,IAAAC,aAAYC,IACV,EAAAC,OAAOD,MAAM,sCACNA,MAET,IAAAE,MAAKC,IACH,EAAAF,OAAOG,IAAI,4CAA6CD,EAAK,IAGrE,CAGA,SAAA8J,CAAkBzK,GAChB,OAAOC,KAAKH,WACTI,KAAK,CAAEC,IAAK,EAAA4B,wBAAwBC,YAAchC,GAClDM,MACC,IAAAC,aAAYC,IACV,EAAAC,OAAOD,MAAM,kCACNA,MAET,IAAAE,MAAKC,IACH,EAAAF,OAAOG,IAAI,wCAAyCD,EAAK,IAGjE,CAGA,YAAA+J,CAAqB1K,GACnB,OAAOC,KAAKH,WACTI,KAAK,CAAEC,IAAK,EAAA4B,wBAAwBE,eAAiBjC,GACrDM,MACC,IAAAC,aAAYC,IACV,EAAAC,OAAOD,MAAM,qCACNA,MAET,IAAAE,MAAKC,IACH,EAAAF,OAAOG,IAAI,2CAA4CD,EAAK,IAGpE,CAGA,cAAAgK,CAAwBC,GACtB,OAAO3K,KAAKH,WACTI,KAAK,CAAEC,IAAK,EAAA4B,wBAAwBG,kBAAoB0I,EAAOxG,IAC/D9D,MACC,IAAAC,aAAYC,IACV,EAAAC,OAAOD,MAAM,wCACNA,MAET,IAAAE,MAAKC,IACH,EAAAF,OAAOG,IAAI,8CAA+CD,EAAK,IAGvE,GAhEW,EAAA4J,kBAAAA,EAOX,eADC,IAAAxJ,QACc,iBAAAC,S,uEAAgC,mB,OAAA,IAAhB,EAAA6J,kBAAA,EAAAA,kBAAgB,W,4EAe/C,eADC,IAAA9J,MAAK,eACK,iBAAAC,S,uEAA4B,mB,OAAA,IAAZ,EAAA8J,cAAA,EAAAA,cAAY,W,wEAevC,eADC,IAAA/J,MAAK,kBACQ,iBAAAC,S,uEAA+B,mB,OAAA,IAAf,EAAA+J,iBAAA,EAAAA,iBAAe,W,2EAe7C,eADC,IAAAC,KAAI,oBACW,iBAAAC,U,iLApDLV,EAAiB,eAD7B,IAAArJ,YAAW,WAGP,iBAAAC,QAAO,iB,kCACuB,mB,OAAA,IAAX,EAAAC,aAAA,EAAAA,aAAW,YAHtBmJ,E,0ECnBb,wBACA,wBACA,uB,qFCFA,yBAAaM,kB,iFCAb,qBAAaC,c,oFCAb,wBAAaC,iB,sGCAb,OACA,QACA,QAMO,IAAMvL,EAAN,MAAMA,qBAAA,EAAAA,mBAAAA,E,qBAAAA,EAAkB,eAJ9B,IAAAL,QAAO,CACNC,QAAS,CAAC,EAAAQ,kBACVH,YAAa,CAAC,EAAAyL,2BAEH1L,E,sHCRb,OACA,OACA,QAIA,QACA,OAGO,IAAM0L,EAAN,MAAMA,uBACX,WAAArL,CAEUsL,GAAA,KAAAA,YAAAA,CACP,CAGH,MAAAC,CAAepL,GACb,OAAOC,KAAKkL,YAAYjL,KAAK,EAAA0C,6BAA6BvC,OAAQL,EACpE,CAGA,MAAAqL,CAAerL,GACb,OAAOC,KAAKkL,YAAYjL,KAAK,EAAA0C,6BAA6BF,OAAQ1C,EACpE,CAGA,aAAAsL,CAAsBtL,GACpB,OAAOC,KAAKkL,YAAYjL,KACtB,EAAA0C,6BAA6BC,eAC7B7C,EAEJ,GAtBW,EAAAkL,uBAAAA,EAOX,eADC,IAAAnK,MAAK,UACE,iBAAAC,S,uEAAqC,mB,OAAA,IAArB,EAAAqJ,uBAAA,EAAAA,uBAAqB,W,qEAK7C,eADC,IAAAtJ,MAAK,UACE,iBAAAC,S,uEAAqC,mB,OAAA,IAArB,EAAAsJ,uBAAA,EAAAA,uBAAqB,W,qEAK7C,eADC,IAAAvJ,MAAK,iBACS,iBAAAC,S,uEAAgC,mB,OAAA,IAAhB,EAAAmJ,kBAAA,EAAAA,kBAAgB,W,qGAjBpCe,EAAsB,eADlC,IAAAhK,YAAW,gBAGP,iBAAAC,QAAO,iB,kCACwB,mB,OAAA,IAAX,EAAAC,aAAA,EAAAA,aAAW,YAHvB8J,E,GCTTK,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAa1M,QAGrB,IAAID,EAASwM,EAAyBE,GAAY,CAGjDzM,QAAS,CAAC,GAOX,OAHA4M,EAAoBH,GAAU1M,EAAQA,EAAOC,QAASwM,GAG/CzM,EAAOC,OACf,C,wECjBA,aACA,OACA,QAEA6M,iBACE,MAAMC,QAAY,EAAAC,YAAYX,OAAO,EAAAlM,WAErC4M,EAAIE,gBADiB,IAErB,MAAMC,EAAOvI,QAAQC,IAAIuI,aACzBJ,EAAIK,mBACEL,EAAIM,OAAOH,GACjB,EAAAxL,OAAOG,IACL,4DAAkDqL,KAEtD,CAEAI,E","sources":["webpack:///external commonjs \"@nestjs/common\"","webpack:///external commonjs \"@nestjs/core\"","webpack:///./src/app/app.module.ts","webpack:///external commonjs \"tslib\"","webpack:///./src/app/auth/auth.module.ts","webpack:///./src/app/auth/auth.controller.ts","webpack:///external commonjs \"@nestjs/microservices\"","webpack:///external commonjs \"rxjs\"","webpack:///../../../libs/server/message-pattern/src/index.ts","webpack:///../../../libs/server/message-pattern/src/lib/auth/index.ts","webpack:///../../../libs/server/message-pattern/src/lib/auth/auth.message-pattern.ts","webpack:///../../../libs/server/message-pattern/src/lib/microservice.ts","webpack:///../../../libs/server/message-pattern/src/lib/chat/index.ts","webpack:///../../../libs/server/message-pattern/src/lib/chat/chat.message-pattern.ts","webpack:///../../../libs/server/dtos/src/lib/account/index.ts","webpack:///../../../libs/server/dtos/src/lib/account/create-account.dto.ts","webpack:///../../../libs/server/dtos/src/lib/account/sign-in.dto.ts","webpack:///../../../libs/server/nats-client/src/index.ts","webpack:///../../../libs/server/nats-client/src/lib/nats-client.module.ts","webpack:///./src/app/chat/chat.module.ts","webpack:///./src/app/chat/chat.controller.ts","webpack:///external commonjs \"@nestjs/websockets\"","webpack:///external commonjs \"socket.io\"","webpack:///../../../libs/shared/socket-pattern/src/index.ts","webpack:///../../../libs/shared/socket-pattern/src/lib/chat.pattern.ts","webpack:///../../../libs/shared/socket-pattern/src/lib/conversation.pattern.ts","webpack:///../../../libs/shared/socket-pattern/src/lib/notification.pattern.ts","webpack:///../../../libs/server/dtos/src/lib/message/index.ts","webpack:///../../../libs/server/dtos/src/lib/message/delete-message.dto.ts","webpack:///../../../libs/server/dtos/src/lib/message/paging-message.dto.ts","webpack:///../../../libs/server/dtos/src/lib/message/send-message.dto.ts","webpack:///../../../libs/server/dtos/src/lib/message/interaction-message.dt.ts","webpack:///../../../libs/server/dtos/src/lib/conversation/index.ts","webpack:///../../../libs/server/dtos/src/lib/conversation/create-conversation.dto.ts","webpack:///../../../libs/server/dtos/src/lib/conversation/paging-conversation.dto.ts","webpack:///../../../libs/server/dtos/src/lib/conversation/join-room.dto.ts","webpack:///../../../libs/server/dtos/src/lib/conversation/leave-room.dto.ts","webpack:///./src/app/chat/chat.enum.ts","webpack:///./src/app/profile/profile.module.ts","webpack:///./src/app/profile/profile.controller.ts","webpack:///../../../libs/server/dtos/src/lib/profile/index.ts","webpack:///../../../libs/server/dtos/src/lib/profile/update-profile.dto.ts","webpack:///../../../libs/server/dtos/src/lib/profile/addfriend-profile.dto.ts","webpack:///../../../libs/server/dtos/src/lib/profile/search-friend.dto.ts","webpack:///./src/app/conversation/conversation.module.ts","webpack:///./src/app/conversation/conversation.controller.ts","webpack:///webpack/bootstrap","webpack:///./src/main.ts"],"sourcesContent":["module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","import { Module } from '@nestjs/common';\nimport { AuthModule } from './auth/auth.module';\nimport { ChatModule } from './chat/chat.module';\nimport { ProfileModule } from './profile/profile.module';\nimport { ConversationModule } from './conversation/conversation.module';\n\n@Module({\n  imports: [AuthModule, ChatModule, ProfileModule, ConversationModule],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n","module.exports = require(\"tslib\");","import { Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { NatsClientModule } from '@server/shared/nats-client';\n\n@Module({\n  providers: [],\n  controllers: [AuthController],\n  imports:[NatsClientModule]\n})\nexport class AuthModule {}\n","import { Controller, Inject, Get, Logger, Post, Body } from '@nestjs/common';\nimport { ClientProxy } from '@nestjs/microservices';\nimport { catchError, tap } from 'rxjs';\nimport { MESSAGE_PATTERN_AUTH } from '@server/shared/message-pattern';\nimport { CreateAccountDto } from '@server/shared/dtos/account';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    @Inject('NATS_SERVICE')\n    private natsClient: ClientProxy\n  ) {}\n\n  @Post('registation')\n  createUser(@Body() payload: CreateAccountDto) {\n    return this.natsClient\n      .send({ cmd: MESSAGE_PATTERN_AUTH.CREATE }, payload)\n      .pipe(\n        catchError((error) => {\n          Logger.error('Get Action: CREATE_ACCOUNT error!!');\n          return error;\n        }),\n        tap((data) => {\n          Logger.log('Get Action: CREATE_ACCOUNT successfully!!', data);\n        })\n      );\n  }\n\n  @Post('authenticate')\n  signIn(@Body() payload: CreateAccountDto) {\n    return this.natsClient\n      .send({ cmd: MESSAGE_PATTERN_AUTH.SIGN_IN }, payload)\n      .pipe(\n        catchError((error) => {\n          Logger.error('Get Action: CREATE_ACCOUNT error!!');\n          return error;\n        }),\n        tap((data) => {\n          Logger.log('Get Action: CREATE_ACCOUNT successfully!!', data);\n        })\n      );\n  }\n}\n","module.exports = require(\"@nestjs/microservices\");","module.exports = require(\"rxjs\");","export * from './lib/auth';\nexport * from './lib/chat';\nexport * from './lib/microservice';\n","export * from './auth.message-pattern'","import { MICRO_SERVICE_NAMES } from '../microservice';\n\nconst MODULES_NAME = Object.freeze({\n  AUTH: `${MICRO_SERVICE_NAMES.AUTH_SERVICE}/AUTH_MODULE`,\n  PROFILE: `${MICRO_SERVICE_NAMES.AUTH_SERVICE}/PROFILE_MODULE`,\n});\n\nexport const MESSAGE_PATTERN_AUTH = Object.freeze({\n  CREATE: `${MODULES_NAME.AUTH}/create`,\n  UPDATE: `${MODULES_NAME.AUTH}/update`,\n  DELETE: `${MODULES_NAME.AUTH}/delete`,\n\n  SIGN_IN: `${MODULES_NAME.AUTH}/sign-in`,\n  REFRESH_TOKEN: `${MODULES_NAME.AUTH}/refresh-token`,\n});\n\nexport const MESSAGE_PATTERN_PROFILE = Object.freeze({\n  UPDATE: `${MODULES_NAME.PROFILE}/update`,\n  ADD_FRIEND: `${MODULES_NAME.PROFILE}/add-friend`,\n  SEARCH_FRIEND: `${MODULES_NAME.PROFILE}/search-friend`,\n  GET_USER_FRIENDS: `${MODULES_NAME.PROFILE}/get-user-friend`,\n});\n","export const MICRO_SERVICE_NAMES = Object.freeze({\n  AUTH_SERVICE: 'AUTH_SERVICE',\n  CHAT_SERVICE: 'CHAT_SERVICE',\n});\n","export * from './chat.message-pattern';","import { MICRO_SERVICE_NAMES } from '../microservice';\n\nconst CHAT_MODULES_NAME = Object.freeze({\n  CHAT: `${MICRO_SERVICE_NAMES.CHAT_SERVICE}/CHAT_MODULE`,\n  CHANNEL: `${MICRO_SERVICE_NAMES.CHAT_SERVICE}/CHANNEL_MODULE`,\n  CONVERSATION:  `${MICRO_SERVICE_NAMES.CHAT_SERVICE}/CONVERSATION_MODULE`,\n});\n\nexport const MESSAGE_PATTERN_CHAT = Object.freeze({\n  SEND_MESSAGE: `${CHAT_MODULES_NAME.CHAT}/send-message`,\n  DELETE: `${CHAT_MODULES_NAME.CHAT}/delete`,\n  PAGING: `${CHAT_MODULES_NAME.CHAT}/paging`,\n\n  INTERACTION: `${CHAT_MODULES_NAME.CHAT}/interaction`,\n});\n\nexport const MESSAGE_PATTERN_CONVERSATION = Object.freeze({\n  CREATE: `${CHAT_MODULES_NAME.CONVERSATION}/create`,\n  DELETE: `${CHAT_MODULES_NAME.CONVERSATION}/delete`,\n  PAGING: `${CHAT_MODULES_NAME.CONVERSATION}/paging`,\n  PAGING_MESSAGE: `${CHAT_MODULES_NAME.CONVERSATION}/pagingMessage`,\n});\n\nexport const MESSAGE_PATTERN_CHANNEL = Object.freeze({\n  CREATE: `${CHAT_MODULES_NAME.CHANNEL}/create`,\n  JOIN: `${CHAT_MODULES_NAME.CHANNEL}/join`,\n  LEAVE: `${CHAT_MODULES_NAME.CHANNEL}/leave`,\n});\n","export * from './create-account.dto';\nexport * from './sign-in.dto';","export class CreateAccountDto {\n  username: string;\n  password: string;\n}\n","export class SignInAccountDto {\n    username: string;\n    password: string;\n  }\n  ","export * from './lib/nats-client.module';\n","import { Module } from '@nestjs/common';\nimport { ClientsModule, Transport } from '@nestjs/microservices';\n\n@Module({\n  imports: [\n    ClientsModule.register([\n      {\n        name: 'NATS_SERVICE',\n        transport: Transport.NATS,\n        options: {\n          servers: [process.env['NATS_URL'] as string],\n        },\n      },\n    ]),\n  ],\n  exports: [\n    ClientsModule.register([\n      {\n        name: 'NATS_SERVICE',\n        transport: Transport.NATS,\n        options: {\n          servers: [process.env['NATS_URL'] as string],\n        },\n      },\n    ]),\n  ],\n})\nexport class NatsClientModule {}","import { Module } from '@nestjs/common';\nimport { ChatGateway } from './chat.controller';\nimport { NatsClientModule } from '@server/shared/nats-client';\n\n@Module({\n  imports: [NatsClientModule],\n  providers: [ChatGateway],\n})\nexport class ChatModule {}\n","import { Inject, Logger } from '@nestjs/common';\nimport {\n  WebSocketGateway,\n  WebSocketServer,\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n  SubscribeMessage,\n} from '@nestjs/websockets';\nimport { Server, Socket } from 'socket.io';\nimport {\n  SOCKET_CHAT_PATTERN,\n  SOCKET_CONVERSATION_PATTERN,\n} from '@shared/socket-pattern';\nimport { ClientProxy } from '@nestjs/microservices';\nimport { MESSAGE_PATTERN_CHAT } from '@server/shared/message-pattern';\nimport { catchError, EMPTY, tap } from 'rxjs';\nimport {\n  CreateMessageDto,\n  CreateMessageDtoWithReceiver,\n  InteractionMessageDto,\n} from '@server/shared/dtos/message';\nimport { JoinRoomDto, LeaveRoomDto } from '@server/shared/dtos/conversation';\nimport { RoomConnectionStatus, UserConnectionStatus } from './chat.enum';\n\n@WebSocketGateway()\nexport class ChatGateway implements OnGatewayConnection, OnGatewayDisconnect {\n  @WebSocketServer()\n  private server: Server;\n\n  constructor(\n    @Inject('NATS_SERVICE')\n    private natsClient: ClientProxy\n  ) {}\n\n  private userChatRooms: Map<string, string[]> = new Map();\n\n  private roomsMaps: Map<string, string[]> = new Map();\n  private conversationRooms: Map<string, string[]> = new Map();\n\n  private usersOnline: Map<number, { userId: number; clientId: string }> =\n    new Map();\n\n  handleConnection(client: Socket) {\n    Logger.log(`Socket --- Client connected: ${client.id}`);\n    this.userChatRooms.set(client.id, []);\n  }\n\n  handleDisconnect(client: Socket) {\n    Logger.log(`Socket --- Client disconnected: ${client.id}`);\n    this.userChatRooms.delete(client.id);\n    Array.from(this.usersOnline).forEach((u) => {\n      if (u[1].clientId == client.id) {\n        this.usersOnline.delete(u[1].userId);\n        this.removeClientFromConversationRoom(\n          client,\n          SOCKET_CONVERSATION_PATTERN.CONVERSATION_ROOM\n        );\n        Logger.log(`Socket --- User Ofline: ${u[1].userId}`);\n      }\n    });\n\n    Logger.log(`Socket --- number user online: ${this.usersOnline.size}`);\n    Logger.log(`Socket --- number roomsMaps: ${this.roomsMaps.size}`);\n  }\n\n  @SubscribeMessage(SOCKET_CONVERSATION_PATTERN.ONLINE)\n  handleUserOnline(client: Socket, userId: number) {\n    Logger.log(`Socket --- User Online: ${userId}`);\n    this.usersOnline.set(userId, { userId, clientId: client.id });\n    this.addClientToConversationRoom(\n      client,\n      SOCKET_CONVERSATION_PATTERN.CONVERSATION_ROOM + '__' + userId\n    );\n  }\n\n  @SubscribeMessage(SOCKET_CONVERSATION_PATTERN.JOIN_ROOM)\n  handleJoinRoom(client: Socket, { roomId }: JoinRoomDto) {\n    Logger.log(`Socket --- Client ${client.id} joining room: ${roomId}`);\n    client.join(roomId);\n    const rooms = this.userChatRooms.get(client.id) || [];\n    this.userChatRooms.set(client.id, [...rooms, roomId]);\n    client.to(roomId).emit(SOCKET_CONVERSATION_PATTERN.USER_JOINED, {\n      roomId,\n    });\n\n    this.addClientToChatRoom(client, roomId);\n  }\n\n  @SubscribeMessage(SOCKET_CONVERSATION_PATTERN.LEAVE_ROOM)\n  handleLeaveRoom(client: Socket, { roomId }: LeaveRoomDto) {\n    client.leave(roomId);\n    const rooms = this.userChatRooms.get(client.id) || [];\n    this.userChatRooms.set(\n      client.id,\n      rooms.filter((r) => r !== roomId)\n    );\n    client.to(roomId).emit(SOCKET_CONVERSATION_PATTERN.USER_LEFT, {\n      roomId,\n    });\n    this.removeClientFromChatRoom(client, roomId);\n    Logger.log(`Socket --- Client ${client.id} leaving room: ${roomId}`);\n  }\n\n  @SubscribeMessage(SOCKET_CHAT_PATTERN.SEND_MESSAGE)\n  handleSendMessage(client: Socket, input: CreateMessageDtoWithReceiver) {\n    const isSendGroup = input.receiverIds?.length > 1;\n    if (isSendGroup) {\n      this.handleSendGroupMessage(input);\n      return;\n    }\n    this.handleSendPersonalMessage(client, input);\n  }\n\n  @SubscribeMessage(SOCKET_CHAT_PATTERN.SEND_INTERACTION)\n  handleInteractMessage(\n    client: Socket,\n    { roomId, interactionKey, senderId }: InteractionMessageDto\n  ) {\n    Logger.log(\n      `Socket --- Interaction from ${client.id} to room ${roomId}: ${interactionKey}`\n    );\n    const resposne = {\n      roomId,\n      interactionKey,\n      senderId: senderId,\n      clientId: client.id,\n    };\n    this.natsClient\n      .emit(MESSAGE_PATTERN_CHAT.INTERACTION, {})\n      .pipe(\n        catchError((error) => {\n          this.server\n            .to(roomId)\n            .emit(SOCKET_CHAT_PATTERN.SEND_INTERACTION_FAIL, resposne);\n          return EMPTY;\n        }),\n        tap((response) => {\n          this.server\n            .to(roomId)\n            .emit(SOCKET_CHAT_PATTERN.NEW_INTERACTION, resposne);\n        })\n      )\n      .subscribe();\n  }\n\n  private handleSendPersonalMessage(\n    client: Socket,\n    input: CreateMessageDtoWithReceiver\n  ) {\n    const receiverId = input.receiverIds[0]; // because chat one by one only has a receiver\n    Logger.log(\n      `Socket --- Message from ${client.id} to room ${input.roomId}: ${input.content} -- receiver: ${receiverId}`\n    );\n    switch (this.checkReceiverStatus(receiverId, input.roomId)) {\n      case UserConnectionStatus.ONLINE:\n        this.handleSendMessageOnline(input);\n        break;\n      case UserConnectionStatus.OFFLINE:\n        this.handleSendMessageUserOffline(input);\n        Logger.warn(`Socket --- Send Message To User Offline....: `);\n        break;\n      case RoomConnectionStatus.RECEIVER_OFF_ROOM:\n        this.handleSendMessageUserOffRoom(input);\n        Logger.warn(`Socket --- Send message but user has off room!!: `);\n        break;\n    }\n  }\n\n  //TODO: Need to send message for current receiver\n  private handleSendMessageOnline(payload: CreateMessageDtoWithReceiver) {\n    console.log('handleSendMessageOnline');\n    this.natsClient\n      .emit(MESSAGE_PATTERN_CHAT.SEND_MESSAGE, payload)\n      .pipe(\n        catchError((error) => {\n          this.server\n            .to(payload.roomId)\n            .emit(SOCKET_CHAT_PATTERN.SEND_MESSAGE_FAIL, payload);\n          return EMPTY;\n        }),\n        tap(() => {\n          this.server.to(payload.roomId).emit(SOCKET_CHAT_PATTERN.NEW_MESSAGE, {\n            ...payload,\n            content: payload.content,\n          });\n        })\n      )\n      .subscribe();\n  }\n\n  //TODO: Need to create message for conversation\n  private handleSendMessageUserOffline(payload: CreateMessageDtoWithReceiver) {\n    console.log('handleSendMessageUserOffline');\n  }\n\n  //TODO: Need to send message up lastmessage of conversation\n  private handleSendMessageUserOffRoom(payload: CreateMessageDtoWithReceiver) {\n    this.natsClient\n      .emit(MESSAGE_PATTERN_CHAT.SEND_MESSAGE, payload)\n      .pipe(\n        catchError((error) => {\n          this.server\n            .to(payload.roomId)\n            .emit(SOCKET_CHAT_PATTERN.SEND_MESSAGE_FAIL, payload);\n          return EMPTY;\n        }),\n        tap(() => {\n          const roomId =\n            SOCKET_CONVERSATION_PATTERN.CONVERSATION_ROOM +\n            '__' +\n            payload.receiverIds[0];\n          this.server.emit(roomId, {\n            content: payload.content,\n            conversationId: payload.roomId,\n            senderId: payload.senderId,\n            receiverId: payload.receiverIds[0],\n            unread: true,\n            createdAt: new Date().toISOString(),\n          });\n        })\n      )\n      .subscribe();\n  }\n\n  private handleSendGroupMessage(payload: CreateMessageDtoWithReceiver) {\n    console.log('handleSendGroupMessage: ', payload);\n  }\n\n  private isUserOnline(userId: number) {\n    return !!this.usersOnline.get(userId);\n  }\n\n  private addClientToChatRoom(client: Socket, roomId: string) {\n    if (!this.roomsMaps.has(roomId)) {\n      this.roomsMaps.set(roomId, [client.id]);\n    } else {\n      const clientIds = [...this.roomsMaps.get(roomId), client.id];\n      this.roomsMaps.set(roomId, clientIds);\n    }\n  }\n\n  private removeClientFromChatRoom(client: Socket, roomId: string) {\n    if (!this.roomsMaps.has(roomId)) {\n      return;\n    }\n    console.log('Current Client: ', client.id);\n    const clientIds = this.roomsMaps\n      .get(roomId)\n      .filter((clientId) => clientId !== client.id);\n    console.log('clientIds: ', clientIds);\n    this.roomsMaps.set(roomId, clientIds);\n    console.log('removeClientFromChatRoom: ', this.roomsMaps.entries());\n  }\n\n  private addClientToConversationRoom(client: Socket, roomId: string) {\n    if (!this.conversationRooms.has(roomId)) {\n      this.conversationRooms.set(roomId, [client.id]);\n    } else {\n      const clientIds = [...this.conversationRooms.get(roomId), client.id];\n      this.conversationRooms.set(roomId, clientIds);\n    }\n    Logger.log(`Socket --- ADD User Conversation ROOM: ${roomId}`);\n  }\n\n  private removeClientFromConversationRoom(client: Socket, roomId: string) {\n    if (!this.conversationRooms.has(roomId)) {\n      return;\n    }\n    Logger.log(`Socket --- Remove User Conversation ROOM: ${roomId}`);\n    const clientIds = this.conversationRooms\n      .get(roomId)\n      .filter((clientId) => clientId !== client.id);\n    this.conversationRooms.set(roomId, clientIds);\n  }\n\n  private checkReceiverStatus(\n    userId: number,\n    roomId: string\n  ): UserConnectionStatus | RoomConnectionStatus {\n    const isOnl = this.isUserOnline(userId);\n    const lengthOfRoom = this.roomsMaps.get(roomId)?.length;\n    const isRoomOnlyClient = lengthOfRoom == 1;\n    console.log('lengthOfRoom: ', lengthOfRoom);\n    console.log('isOnl: ', isOnl);\n    console.log('isRoomOnlyClient: ', isRoomOnlyClient);\n    if (!isOnl) return UserConnectionStatus.OFFLINE;\n    if (isRoomOnlyClient) return RoomConnectionStatus.RECEIVER_OFF_ROOM;\n    return isOnl && UserConnectionStatus.ONLINE;\n  }\n}\n","module.exports = require(\"@nestjs/websockets\");","module.exports = require(\"socket.io\");","export * from './lib/chat.pattern';\nexport * from './lib/conversation.pattern';\nexport * from './lib/notification.pattern';\n","export const SOCKET_CHAT_PATTERN = Object.freeze({\n  SEND_MESSAGE: 'SEND_MESSAGE',\n  SEND_MESSAGE_FAIL: 'SEND_MESSAGE_FAIL',\n\n  NEW_MESSAGE: 'NEW_MESSAGE',\n  SEND_INTERACTION: 'SEND_INTERACTION',\n  SEND_INTERACTION_FAIL: 'SEND_INTERACTION_FAIL',\n  NEW_INTERACTION: 'NEW_INTERACTION',\n\n  NEW_LAST_MESSAGE: 'NEW_LAST_MESSAGE',\n});\n","export const SOCKET_CONVERSATION_PATTERN = Object.freeze({\n  ONLINE: 'ONLINE',\n  INIT_CONVERSATION: 'INIT_CONVERSATION',\n  DESTROY_CONVERSATION: 'DESTROY_CONVERSATION',\n  JOIN_ROOM: 'JOIN_ROOM',\n  USER_JOINED: 'USER_JOINED',\n  LEAVE_ROOM: 'LEAVE_ROOM',\n  USER_LEFT: 'USER_LEFT',\n  NEW_CONVERSATION: 'NEW_CONVERSATION',\n  CONVERSATION_ROOM: 'CONVERSATION_ROOM'\n});\n","export const SOCKET_NOTIFICATION_PATTERN = Object.freeze({\n    NEW_FRIEND: 'NEW_FRIEND',\n    NEW_MESSAGE_INTERACTION: 'NEW_MESSAGE_INTERACTION'\n});\n","export * from './delete-message.dto';\nexport * from './paging-message.dto';\nexport * from './send-message.dto';\nexport * from './interaction-message.dt';","export class DeleteMessageDto {\n  id: number;\n}\n","export class PagingMessageDto {\n  offset: number;\n  limit: number;\n  keyword?: string;\n  conversationId: number;\n}\n","export class CreateMessageDto {\n  roomId: number;\n  content: string;\n  senderId: number;\n}\nexport class CreateMessageDtoWithReceiver {\n  senderId: number;\n  content: string;\n  roomId: string;\n  receiverIds: number[];\n}\n","export class InteractionMessageDto {\n  interactionKey: string;\n  roomId: string;\n  senderId: number;\n}\n","export * from './create-conversation.dto';\nexport * from './paging-conversation.dto';\nexport * from './join-room.dto';\nexport * from './leave-room.dto';","export class CreateConversationDto {\n  memberIds: number[];\n}\n","export class PagingConversationDto {\n  offset: number;\n  limit: number;\n  keyword?: string;\n  profileId?: number\n}","export class JoinRoomDto {\n  roomId: string;\n  userId: number;\n}\n","export class LeaveRoomDto {\n    roomId: string;\n    userId: number;\n  }\n  ","export enum UserConnectionStatus {\n  ONLINE = 'ONLINE',\n  OFFLINE = 'OFFLINE',\n}\n\nexport enum RoomConnectionStatus {\n  EMPTY = 'EMPTY',\n  RECEIVER_OFF_ROOM = 'RECEIVER_OFF_ROOM',\n}\n","import { Module } from '@nestjs/common';\nimport { ProfileController } from './profile.controller';\nimport { NatsClientModule } from '@server/shared/nats-client';\n\n@Module({\n  providers: [],\n  controllers: [ProfileController],\n  imports: [NatsClientModule],\n})\nexport class ProfileModule {}\n","import {\n  Controller,\n  Inject,\n  Get,\n  Logger,\n  Post,\n  Body,\n  Param,\n} from '@nestjs/common';\nimport { ClientProxy } from '@nestjs/microservices';\nimport { catchError, tap } from 'rxjs';\nimport { MESSAGE_PATTERN_PROFILE } from '@server/shared/message-pattern';\nimport {\n  AddFriendDto,\n  UpdateProfileDto,\n  SearchFriendDto,\n} from '@server/shared/dtos/profile';\n\n@Controller('profile')\nexport class ProfileController {\n  constructor(\n    @Inject('NATS_SERVICE')\n    private natsClient: ClientProxy\n  ) {}\n\n  @Post()\n  updateProfile(@Body() payload: UpdateProfileDto) {\n    return this.natsClient\n      .send({ cmd: MESSAGE_PATTERN_PROFILE.UPDATE }, payload)\n      .pipe(\n        catchError((error) => {\n          Logger.error('Get Action: UPDATE_PROFILE error!!');\n          return error;\n        }),\n        tap((data) => {\n          Logger.log('Get Action: UPDATE_PROFILE successfully!!', data);\n        })\n      );\n  }\n\n  @Post('/add-friend')\n  addFriend(@Body() payload: AddFriendDto) {\n    return this.natsClient\n      .send({ cmd: MESSAGE_PATTERN_PROFILE.ADD_FRIEND }, payload)\n      .pipe(\n        catchError((error) => {\n          Logger.error('Get Action: ADD_FRIEND error!!');\n          return error;\n        }),\n        tap((data) => {\n          Logger.log('Get Action: ADD_FRIEND successfully!!', data);\n        })\n      );\n  }\n\n  @Post('/search-friend')\n  searchFriend(@Body() payload: SearchFriendDto) {\n    return this.natsClient\n      .send({ cmd: MESSAGE_PATTERN_PROFILE.SEARCH_FRIEND }, payload)\n      .pipe(\n        catchError((error) => {\n          Logger.error('Get Action: SEARCH_FRIEND error!!');\n          return error;\n        }),\n        tap((data) => {\n          Logger.log('Get Action: SEARCH_FRIEND successfully!!', data);\n        })\n      );\n  }\n\n  @Get('/user-friend/:id')\n  getUserFriends(@Param() params: any) {\n    return this.natsClient\n      .send({ cmd: MESSAGE_PATTERN_PROFILE.GET_USER_FRIENDS }, params.id)\n      .pipe(\n        catchError((error) => {\n          Logger.error('Get Action: GET_USER_FRIENDS error!!');\n          return error;\n        }),\n        tap((data) => {\n          Logger.log('Get Action: GET_USER_FRIENDS successfully!!', data);\n        })\n      );\n  }\n}\n","export * from './update-profile.dto';\nexport * from './addfriend-profile.dto';\nexport * from './search-friend.dto';","export class UpdateProfileDto {\n  id: number;\n  bio: string;\n  dob: string;\n  fullName: string;\n  avatarUrl: string;\n}\n","export class AddFriendDto {\n  profileId: number;\n  friendId: number;\n}\n","export class SearchFriendDto {\n  keyword: string;\n  offset: number;\n  limit: number;\n  sortField?: string;\n  sortOrder?: string;\n  profileId?:number\n}\n","import { Module } from '@nestjs/common';\nimport { NatsClientModule } from '@server/shared/nats-client';\nimport { ConversationController } from './conversation.controller';\n\n@Module({\n  imports: [NatsClientModule],\n  controllers: [ConversationController],\n})\nexport class ConversationModule {}\n","import { Body, Controller, Inject, Post } from '@nestjs/common';\nimport { ClientProxy } from '@nestjs/microservices';\nimport {\n  CreateConversationDto,\n  PagingConversationDto,\n} from '@server/shared/dtos/conversation';\nimport { PagingMessageDto } from '@server/shared/dtos/message';\nimport { MESSAGE_PATTERN_CONVERSATION } from '@server/shared/message-pattern';\n\n@Controller('conversation')\nexport class ConversationController {\n  constructor(\n    @Inject('NATS_SERVICE')\n    private clientProxy: ClientProxy\n  ) {}\n\n  @Post('create')\n  create(@Body() payload: CreateConversationDto) {\n    return this.clientProxy.send(MESSAGE_PATTERN_CONVERSATION.CREATE, payload);\n  }\n\n  @Post('search')\n  paging(@Body() payload: PagingConversationDto) {\n    return this.clientProxy.send(MESSAGE_PATTERN_CONVERSATION.PAGING, payload);\n  }\n\n  @Post('pagingMessage')\n  pagingMessage(@Body() payload: PagingMessageDto) {\n    return this.clientProxy.send(\n      MESSAGE_PATTERN_CONVERSATION.PAGING_MESSAGE,\n      payload\n    );\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport { Logger } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app/app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  const globalPrefix = '';\n  app.setGlobalPrefix(globalPrefix);\n  const port = process.env.GATEWAY_PORT;\n  app.enableCors();\n  await app.listen(port);\n  Logger.log(\n    `🚀 Application is running on: http://localhost:${port}/${globalPrefix}`\n  );\n}\n\nbootstrap();\n"],"names":["module","exports","require","AppModule","Module","imports","AuthModule","ChatModule","ProfileModule","ConversationModule","controllers","providers","AuthController","NatsClientModule","constructor","natsClient","createUser","payload","this","send","cmd","MESSAGE_PATTERN_AUTH","CREATE","pipe","catchError","error","Logger","tap","data","log","signIn","SIGN_IN","Post","Body","CreateAccountDto","Controller","Inject","ClientProxy","MODULES_NAME","Object","freeze","AUTH","MICRO_SERVICE_NAMES","AUTH_SERVICE","PROFILE","UPDATE","DELETE","REFRESH_TOKEN","MESSAGE_PATTERN_PROFILE","ADD_FRIEND","SEARCH_FRIEND","GET_USER_FRIENDS","CHAT_SERVICE","CHAT_MODULES_NAME","CHAT","CHANNEL","CONVERSATION","MESSAGE_PATTERN_CHAT","SEND_MESSAGE","PAGING","INTERACTION","MESSAGE_PATTERN_CONVERSATION","PAGING_MESSAGE","MESSAGE_PATTERN_CHANNEL","JOIN","LEAVE","SignInAccountDto","ClientsModule","register","name","transport","Transport","NATS","options","servers","process","env","ChatGateway","userChatRooms","Map","roomsMaps","conversationRooms","usersOnline","handleConnection","client","id","set","handleDisconnect","delete","Array","from","forEach","u","clientId","userId","removeClientFromConversationRoom","SOCKET_CONVERSATION_PATTERN","CONVERSATION_ROOM","size","handleUserOnline","addClientToConversationRoom","handleJoinRoom","roomId","join","rooms","get","to","emit","USER_JOINED","addClientToChatRoom","handleLeaveRoom","leave","filter","r","USER_LEFT","removeClientFromChatRoom","handleSendMessage","input","receiverIds","length","handleSendGroupMessage","handleSendPersonalMessage","handleInteractMessage","interactionKey","senderId","resposne","server","SOCKET_CHAT_PATTERN","SEND_INTERACTION_FAIL","EMPTY","response","NEW_INTERACTION","subscribe","receiverId","content","checkReceiverStatus","UserConnectionStatus","ONLINE","handleSendMessageOnline","OFFLINE","handleSendMessageUserOffline","warn","RoomConnectionStatus","RECEIVER_OFF_ROOM","handleSendMessageUserOffRoom","console","SEND_MESSAGE_FAIL","NEW_MESSAGE","conversationId","unread","createdAt","Date","toISOString","isUserOnline","has","clientIds","entries","isOnl","lengthOfRoom","isRoomOnlyClient","WebSocketServer","Server","SubscribeMessage","Socket","JOIN_ROOM","JoinRoomDto","LEAVE_ROOM","LeaveRoomDto","CreateMessageDtoWithReceiver","SEND_INTERACTION","InteractionMessageDto","WebSocketGateway","NEW_LAST_MESSAGE","INIT_CONVERSATION","DESTROY_CONVERSATION","NEW_CONVERSATION","SOCKET_NOTIFICATION_PATTERN","NEW_FRIEND","NEW_MESSAGE_INTERACTION","DeleteMessageDto","PagingMessageDto","CreateMessageDto","CreateConversationDto","PagingConversationDto","ProfileController","updateProfile","addFriend","searchFriend","getUserFriends","params","UpdateProfileDto","AddFriendDto","SearchFriendDto","Get","Param","ConversationController","clientProxy","create","paging","pagingMessage","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","async","app","NestFactory","setGlobalPrefix","port","GATEWAY_PORT","enableCors","listen","bootstrap"],"sourceRoot":""}