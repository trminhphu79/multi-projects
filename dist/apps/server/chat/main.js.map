{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///external commonjs \"@nestjs/common\"","webpack:///external commonjs \"@nestjs/core\"","webpack:///./src/app/app.module.ts","webpack:///external commonjs \"tslib\"","webpack:///../../../libs/server/entities/src/lib/message.entity.ts","webpack:///external commonjs \"sequelize-typescript\"","webpack:///../../../libs/server/entities/src/lib/profile.entity.ts","webpack:///../../../libs/server/entities/src/lib/conversation.entity.ts","webpack:///../../../libs/server/entities/src/lib/user-conversation.entity.ts","webpack:///../../../libs/server/entities/src/lib/account.entity.ts","webpack:///../../../libs/server/entities/src/lib/friend.entity.ts","webpack:///external commonjs \"@nestjs/sequelize\"","webpack:///./src/app/channel/channel.module.ts","webpack:///./src/app/channel/channel.service.ts","webpack:///./src/app/channel/channel.controller.ts","webpack:///external commonjs \"@nestjs/microservices\"","webpack:///../../../libs/server/message-pattern/src/index.ts","webpack:///../../../libs/server/message-pattern/src/lib/auth/index.ts","webpack:///../../../libs/server/message-pattern/src/lib/auth/auth.message-pattern.ts","webpack:///../../../libs/server/message-pattern/src/lib/microservice.ts","webpack:///../../../libs/server/message-pattern/src/lib/chat/index.ts","webpack:///../../../libs/server/message-pattern/src/lib/chat/chat.message-pattern.ts","webpack:///./src/app/message/message.module.ts","webpack:///./src/app/message/message.controller.ts","webpack:///../../../libs/server/dtos/src/lib/message/index.ts","webpack:///../../../libs/server/dtos/src/lib/message/delete-message.dto.ts","webpack:///../../../libs/server/dtos/src/lib/message/paging-message.dto.ts","webpack:///../../../libs/server/dtos/src/lib/message/send-message.dto.ts","webpack:///../../../libs/server/dtos/src/lib/message/interaction-message.dt.ts","webpack:///./src/app/message/message.service.ts","webpack:///external commonjs \"rxjs\"","webpack:///external commonjs \"rxjs/operators\"","webpack:///./src/app/conversation/conversation.module.ts","webpack:///./src/app/conversation/conversation.service.ts","webpack:///external commonjs \"sequelize\"","webpack:///./src/app/conversation/conversation.controller.ts","webpack:///../../../libs/server/dtos/src/lib/conversation/index.ts","webpack:///../../../libs/server/dtos/src/lib/conversation/create-conversation.dto.ts","webpack:///../../../libs/server/dtos/src/lib/conversation/paging-conversation.dto.ts","webpack:///../../../libs/server/dtos/src/lib/conversation/join-room.dto.ts","webpack:///../../../libs/server/dtos/src/lib/conversation/leave-room.dto.ts","webpack:///webpack/bootstrap","webpack:///./src/main.ts"],"sourcesContent":["module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","import { Module } from '@nestjs/common';\nimport { Message } from '@server/shared/entity/message';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { ChannelModule } from './channel/channel.module';\nimport { MessageModule } from './message/message.module';\nimport { Profile } from '@server/shared/entity/profile';\nimport { Conversation } from '@server/shared/entity/conversation';\nimport { Account } from '@server/shared/entity/account';\nimport { Friend } from '@server/shared/entity/friend';\nimport { UserConversation } from '@server/shared/entity/user-conversation';\nimport { ConversationModule } from './conversation/conversation.module';\n\n@Module({\n  imports: [\n    SequelizeModule.forRoot({\n      dialect: 'postgres',\n      host: process.env.POSTGRES_HOST,\n      port: +process.env.POSTGRES_PORT,\n      username: process.env.POSTGRES_USERNAME,\n      password: process.env.POSTGRES_PASSWORD,\n      database: process.env.POSTGRES_DB,\n      models: [Message, Profile, Conversation, Account, UserConversation, Friend],\n      autoLoadModels: true,\n      synchronize: true,\n    }),\n    ChannelModule,\n    MessageModule,\n    ConversationModule\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n","module.exports = require(\"tslib\");","import {\n  Column,\n  Model,\n  Table,\n  PrimaryKey,\n  AutoIncrement,\n  DataType,\n  BelongsTo,\n  ForeignKey,\n} from 'sequelize-typescript';\nimport { Profile } from './profile.entity';\nimport { Conversation } from './conversation.entity';\n\n@Table({ tableName: 'message', timestamps: true })\nexport class Message extends Model {\n  @PrimaryKey\n  @AutoIncrement\n  @Column\n  override id: number;\n\n  @ForeignKey(() => Conversation)\n  @Column\n  conversationId: number;\n\n  @ForeignKey(() => Profile)\n  @Column\n  senderId: number;\n\n  @Column\n  content: string;\n\n  @Column({ defaultValue: 'TEXT' })\n  messageType: string;\n  \n  @Column({\n    type: DataType.DATE,\n    defaultValue: DataType.NOW,\n  })\n  override createdAt: Date;\n\n  @Column({\n    type: DataType.DATE,\n    defaultValue: DataType.NOW,\n  })\n  override updatedAt: Date;\n}\n","module.exports = require(\"sequelize-typescript\");","import {\n  Column,\n  Model,\n  Table,\n  PrimaryKey,\n  AutoIncrement,\n  DataType,\n  BelongsToMany,\n  BelongsTo,\n  ForeignKey,\n} from 'sequelize-typescript';\nimport { Conversation } from './conversation.entity';\nimport { Account } from './account.entity';\nimport { UserConversation } from './user-conversation.entity';\nimport { Friend } from './friend.entity';\n\n@Table({ tableName: 'profile' })\nexport class Profile extends Model {\n  @PrimaryKey\n  @AutoIncrement\n  @Column\n  override id: number;\n\n  @ForeignKey(() => Account)\n  @Column\n  accountId: number;\n\n  @BelongsTo(() => Account)\n  account: Account;\n\n  @BelongsToMany(() => Conversation, () => UserConversation)\n  conversations: Conversation[];\n\n  @Column\n  fullName: string;\n\n  @Column\n  avatarUrl: string;\n\n  @Column\n  bio: string;\n\n  @Column({\n    type: DataType.DATE,\n    defaultValue: null,\n  })\n  dob: Date;\n\n  @Column({\n    type: DataType.DATE,\n    defaultValue: DataType.NOW,\n  })\n  override createdAt: Date;\n\n  @Column({\n    type: DataType.DATE,\n    defaultValue: DataType.NOW,\n  })\n  override updatedAt: Date;\n\n  @BelongsToMany(() => Profile, () => Friend, 'profileId', 'friendId')\n  friends: Profile[];\n}\n","import {\nColumn,\nModel,\nTable,\nPrimaryKey,\nAutoIncrement,\nDataType,\nHasMany,\nBelongsToMany,\n} from 'sequelize-typescript';\nimport { Message } from './message.entity';\nimport { Profile } from './profile.entity';\nimport { UserConversation } from './user-conversation.entity';\n\n@Table({ tableName: 'conversation' })\nexport class Conversation extends Model {\n@AutoIncrement\n@PrimaryKey\n@Column\noverride id: number;\n\n@Column\nname: string;\n\n@Column({ defaultValue: false })\nisGroup: boolean;\n\n@BelongsToMany(() => Profile, () => UserConversation)\nmembers: Profile[];\n\n@Column({\n  type: DataType.DATE,\n  defaultValue: DataType.NOW,\n})\noverride createdAt: Date;\n\n@Column({\n  type: DataType.DATE,\n  defaultValue: DataType.NOW,\n})\noverride updatedAt: Date;\n}\n","import {\n  Column,\n  DataType,\n  ForeignKey,\n  Model,\n  Table,\n} from 'sequelize-typescript';\nimport { Conversation } from './conversation.entity';\nimport { Profile } from './profile.entity';\n\n@Table({ tableName: 'conversation_members' })\nexport class UserConversation extends Model {\n  @ForeignKey(() => Conversation)\n  @Column({ field: 'conversationId' })\n  conversationId: number;\n\n  @ForeignKey(() => Profile)\n  @Column({ field: 'userId' })\n  userId: number;\n\n  @Column({ defaultValue: DataType.NOW })\n  joinedAt: Date;\n}\n","import {\n  Column,\n  Model,\n  Table,\n  PrimaryKey,\n  AutoIncrement,\n  DataType,\n  HasMany,\n} from 'sequelize-typescript';\nimport { Profile } from './profile.entity';\n\n@Table({ tableName: 'account' })\nexport class Account extends Model {\n  @PrimaryKey\n  @AutoIncrement\n  @Column\n  override id: number;\n\n  @HasMany(() => Profile)\n  profiles: Profile[];\n\n  @Column\n  username: string;\n\n  @Column\n  password: string;\n\n  @Column({\n    type: DataType.DATE,\n    defaultValue: DataType.NOW,\n  })\n  override createdAt: Date;\n\n  @Column({\n    type: DataType.DATE,\n    defaultValue: DataType.NOW,\n  })\n  override updatedAt: Date;\n}\n","import { Column, Model, Table, ForeignKey, DataType } from 'sequelize-typescript';\nimport { Profile } from './profile.entity';\n\n@Table({ tableName: 'friend' })\nexport class Friend extends Model {\n  @ForeignKey(() => Profile)\n  @Column\n  profileId: number;\n\n  @ForeignKey(() => Profile)\n  @Column\n  friendId: number;\n\n  @Column({\n    type: DataType.BOOLEAN,\n    defaultValue: false,\n  })\n  isBestFriend: boolean; // Example: Additional column to manage the type of friendship\n}\n","module.exports = require(\"@nestjs/sequelize\");","import { Module } from '@nestjs/common';\nimport { ChannelService } from './channel.service';\nimport { ChannelController } from './channel.controller';\nimport { Profile } from '@server/shared/entity/profile';\nimport { Conversation } from '@server/shared/entity/conversation';\nimport { Account } from '@server/shared/entity/account';\nimport { Friend } from '@server/shared/entity/friend';\nimport { UserConversation } from '@server/shared/entity/user-conversation';\nimport { Message } from '@server/shared/entity/message';\nimport { SequelizeModule } from '@nestjs/sequelize';\n\n@Module({\n  imports: [\n    SequelizeModule.forFeature([\n      Message,\n      Friend,\n      Profile,\n      Conversation,\n      Account,\n      UserConversation,\n    ]),\n  ],\n  providers: [ChannelService],\n  controllers: [ChannelController]\n})\nexport class ChannelModule {}\n","import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class ChannelService {\n  create() {\n    console.log('create');\n  }\n\n  join() {\n    console.log('join');\n  }\n\n  leave() {\n    console.log('leave');\n  }\n}\n","import { Controller } from '@nestjs/common';\nimport { MessagePattern } from '@nestjs/microservices';\nimport { MESSAGE_PATTERN_CHANNEL } from '@server/shared/message-pattern';\nimport { ChannelService } from './channel.service';\n\n@Controller()\nexport class ChannelController {\n  constructor(private service: ChannelService) {}\n  @MessagePattern(MESSAGE_PATTERN_CHANNEL.JOIN)\n  create() {\n    return this.service.create();\n  }\n\n  @MessagePattern(MESSAGE_PATTERN_CHANNEL.JOIN)\n  join() {\n    return this.service.join();\n  }\n\n  @MessagePattern(MESSAGE_PATTERN_CHANNEL.JOIN)\n  leave() {\n    return this.service.leave();\n  }\n}\n","module.exports = require(\"@nestjs/microservices\");","export * from './lib/auth';\nexport * from './lib/chat';\nexport * from './lib/microservice';\n","export * from './auth.message-pattern'","import { MICRO_SERVICE_NAMES } from '../microservice';\n\nconst MODULES_NAME = Object.freeze({\n  AUTH: `${MICRO_SERVICE_NAMES.AUTH_SERVICE}/AUTH_MODULE`,\n  PROFILE: `${MICRO_SERVICE_NAMES.AUTH_SERVICE}/PROFILE_MODULE`,\n});\n\nexport const MESSAGE_PATTERN_AUTH = Object.freeze({\n  CREATE: `${MODULES_NAME.AUTH}/create`,\n  UPDATE: `${MODULES_NAME.AUTH}/update`,\n  DELETE: `${MODULES_NAME.AUTH}/delete`,\n\n  SIGN_IN: `${MODULES_NAME.AUTH}/sign-in`,\n  REFRESH_TOKEN: `${MODULES_NAME.AUTH}/refresh-token`,\n});\n\nexport const MESSAGE_PATTERN_PROFILE = Object.freeze({\n  UPDATE: `${MODULES_NAME.PROFILE}/update`,\n  ADD_FRIEND: `${MODULES_NAME.PROFILE}/add-friend`,\n  SEARCH_FRIEND: `${MODULES_NAME.PROFILE}/search-friend`,\n  GET_USER_FRIENDS: `${MODULES_NAME.PROFILE}/get-user-friend`,\n});\n","export const MICRO_SERVICE_NAMES = Object.freeze({\n  AUTH_SERVICE: 'AUTH_SERVICE',\n  CHAT_SERVICE: 'CHAT_SERVICE',\n});\n","export * from './chat.message-pattern';","import { MICRO_SERVICE_NAMES } from '../microservice';\n\nconst CHAT_MODULES_NAME = Object.freeze({\n  CHAT: `${MICRO_SERVICE_NAMES.CHAT_SERVICE}/CHAT_MODULE`,\n  CHANNEL: `${MICRO_SERVICE_NAMES.CHAT_SERVICE}/CHANNEL_MODULE`,\n  CONVERSATION:  `${MICRO_SERVICE_NAMES.CHAT_SERVICE}/CONVERSATION_MODULE`,\n});\n\nexport const MESSAGE_PATTERN_CHAT = Object.freeze({\n  SEND_MESSAGE: `${CHAT_MODULES_NAME.CHAT}/send-message`,\n  DELETE: `${CHAT_MODULES_NAME.CHAT}/delete`,\n  PAGING: `${CHAT_MODULES_NAME.CHAT}/paging`,\n\n  INTERACTION: `${CHAT_MODULES_NAME.CHAT}/interaction`,\n});\n\nexport const MESSAGE_PATTERN_CONVERSATION = Object.freeze({\n  CREATE: `${CHAT_MODULES_NAME.CONVERSATION}/create`,\n  DELETE: `${CHAT_MODULES_NAME.CONVERSATION}/delete`,\n  PAGING: `${CHAT_MODULES_NAME.CONVERSATION}/paging`,\n  PAGING_MESSAGE: `${CHAT_MODULES_NAME.CONVERSATION}/pagingMessage`,\n});\n\nexport const MESSAGE_PATTERN_CHANNEL = Object.freeze({\n  CREATE: `${CHAT_MODULES_NAME.CHANNEL}/create`,\n  JOIN: `${CHAT_MODULES_NAME.CHANNEL}/join`,\n  LEAVE: `${CHAT_MODULES_NAME.CHANNEL}/leave`,\n});\n","import { Module } from '@nestjs/common';\nimport { MessageController } from './message.controller';\nimport { MessageService } from './message.service';\nimport { Profile } from '@server/shared/entity/profile';\nimport { Conversation } from '@server/shared/entity/conversation';\nimport { Account } from '@server/shared/entity/account';\nimport { Friend } from '@server/shared/entity/friend';\nimport { UserConversation } from '@server/shared/entity/user-conversation';\nimport { Message } from '@server/shared/entity/message';\nimport { SequelizeModule } from '@nestjs/sequelize';\n\n@Module({\n  imports: [\n    SequelizeModule.forFeature([\n      Message,\n      Friend,\n      Profile,\n      Conversation,\n      Account,\n      UserConversation,\n    ]),\n  ],\n  controllers: [MessageController],\n  providers: [MessageService],\n})\nexport class MessageModule {}\n","import { Controller, Logger } from '@nestjs/common';\nimport { MessagePattern } from '@nestjs/microservices';\nimport { MESSAGE_PATTERN_CHAT } from '@server/shared/message-pattern';\nimport { CreateMessageDto } from '@server/shared/dtos/message';\nimport { MessageService } from './message.service';\nimport { of } from 'rxjs';\n\n@Controller()\nexport class MessageController {\n  constructor(private service: MessageService) {}\n\n  @MessagePattern(MESSAGE_PATTERN_CHAT.SEND_MESSAGE)\n  send(payload: CreateMessageDto) {\n    Logger.log(`Message received from ${payload.senderId}: ${payload.content}`);\n    return this.service.send(payload);\n  }\n\n  @MessagePattern(MESSAGE_PATTERN_CHAT.PAGING)\n  paging(payload: any) {\n    return [];\n  }\n\n  @MessagePattern(MESSAGE_PATTERN_CHAT.DELETE)\n  delete(payload: any) {\n    return [];\n  }\n}\n","export * from './delete-message.dto';\nexport * from './paging-message.dto';\nexport * from './send-message.dto';\nexport * from './interaction-message.dt';","export class DeleteMessageDto {\n  id: number;\n}\n","export class PagingMessageDto {\n  offset: number;\n  limit: number;\n  keyword?: string;\n  conversationId: number;\n}\n","export class CreateMessageDto {\n  roomId: number;\n  content: string;\n  senderId: number;\n}\nexport class CreateMessageDtoWithReceiver {\n  senderId: number;\n  content: string;\n  roomId: string;\n  receiverIds: number[];\n}\n","export class InteractionMessageDto {\n  interactionKey: string;\n  roomId: string;\n  senderId: number;\n}\n","import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { CreateMessageDto } from '@server/shared/dtos/message';\nimport { Message } from '@server/shared/entity/message';\nimport { Conversation } from '@server/shared/entity/conversation';\nimport { Profile } from '@server/shared/entity/profile';\nimport { InjectModel } from '@nestjs/sequelize';\nimport { from, Observable, throwError } from 'rxjs';\nimport { map, switchMap, catchError } from 'rxjs/operators';\n@Injectable()\nexport class MessageService {\n  constructor(\n    @InjectModel(Conversation)\n    private conversationModel: typeof Conversation,\n    @InjectModel(Message)\n    private messageModel: typeof Message,\n    @InjectModel(Profile)\n    private profileModel: typeof Profile\n  ) {}\n\n  send(payload: CreateMessageDto): Observable<any> {\n    const { roomId, senderId, content } = payload;\n\n    return from(this.profileModel.findByPk(senderId)).pipe(\n      switchMap((sender) => {\n        if (!sender) {\n          return throwError(\n            () => new NotFoundException(`Sender with ID ${senderId} not found`)\n          );\n        }\n\n        // If roomId is provided, validate it exists\n        return from(this.conversationModel.findByPk(roomId)).pipe(\n          switchMap((conversation) => {\n            if (!conversation) {\n              return throwError(\n                () =>\n                  new NotFoundException(\n                    `Conversation with ID ${roomId} not found`\n                  )\n              );\n            }\n\n            // Create the new message\n            return from(\n              this.messageModel.create({\n                conversationId: roomId,\n                senderId,\n                content,\n              })\n            ).pipe(\n              map((newMessage) => ({\n                data: newMessage,\n                message: 'Send message successfully!',\n              }))\n            );\n          })\n        );\n      }),\n      catchError((error) => throwError(() => error))\n    );\n  }\n\n  async getConversationsByProfileId(\n    profileId: number\n  ): Promise<Conversation[]> {\n    return await this.conversationModel.findAll({\n      include: [\n        {\n          association: 'members', // Association defined in the Conversation model\n          where: { id: profileId },\n          through: { attributes: [] }, // Exclude join table attributes\n        },\n      ],\n    });\n  }\n}\n","module.exports = require(\"rxjs\");","module.exports = require(\"rxjs/operators\");","import { Module } from '@nestjs/common';\nimport { ConversationService } from './conversation.service';\nimport { ConversationController } from './conversation.controller';\nimport { Profile } from '@server/shared/entity/profile';\nimport { Conversation } from '@server/shared/entity/conversation';\nimport { Account } from '@server/shared/entity/account';\nimport { Friend } from '@server/shared/entity/friend';\nimport { UserConversation } from '@server/shared/entity/user-conversation';\nimport { Message } from '@server/shared/entity/message';\nimport { SequelizeModule } from '@nestjs/sequelize';\n\n@Module({\n  imports: [\n    SequelizeModule.forFeature([\n      Message,\n      Friend,\n      Profile,\n      Conversation,\n      Account,\n      UserConversation,\n    ]),\n  ],\n  providers: [ConversationService],\n  controllers: [ConversationController],\n})\nexport class ConversationModule {}\n","import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/sequelize';\nimport {\n  CreateConversationDto,\n  PagingConversationDto,\n} from '@server/shared/dtos/conversation';\nimport { PagingMessageDto } from '@server/shared/dtos/message';\nimport { Conversation } from '@server/shared/entity/conversation';\nimport { Message } from '@server/shared/entity/message';\nimport { Profile } from '@server/shared/entity/profile';\nimport {\n  Observable,\n  throwError,\n  from,\n  switchMap,\n  of,\n  map,\n  catchError,\n  tap,\n} from 'rxjs';\nimport { Op } from 'sequelize';\nimport { Sequelize } from 'sequelize-typescript';\n\n@Injectable()\nexport class ConversationService {\n  constructor(\n    @InjectModel(Conversation)\n    private conversationModel: typeof Conversation,\n    @InjectModel(Profile)\n    private profileModel: typeof Profile,\n    private sequelize: Sequelize,\n    @InjectModel(Message)\n    private messageModel: typeof Message\n  ) {}\n\n  createConversation(payload: CreateConversationDto): Observable<any> {\n    const { memberIds } = payload;\n\n    if (memberIds.length !== 2) {\n      return throwError(\n        () =>\n          new BadRequestException(\n            'Conversations must be between exactly two members'\n          )\n      );\n    }\n\n    // Validate members\n    return from(\n      this.profileModel.findAll({\n        where: { id: memberIds },\n      })\n    ).pipe(\n      switchMap((members) => {\n        if (members.length !== memberIds.length) {\n          return throwError(\n            () => new NotFoundException('One or more members not found')\n          );\n        }\n\n        console.log('members: ', members);\n        // Check if conversation exists\n        return from(\n          this.conversationModel.findAll({\n            include: [\n              {\n                model: Profile,\n                as: 'members',\n                where: {\n                  id: memberIds,\n                },\n                through: { attributes: [] }, // Exclude join table\n              },\n            ],\n          })\n        ).pipe(\n          switchMap((existingConversation) => {\n            console.log('Found existingConversation', existingConversation);\n            if (existingConversation.length == 2) {\n              return of({\n                message: 'Conversation already exists',\n                data: existingConversation,\n              });\n            }\n\n            // If no conversation exists, create one\n            return from(\n              this.conversationModel.create({\n                name: `Conversation between ${members\n                  .map((m) => m.fullName)\n                  .join(' and ')}`,\n              })\n            ).pipe(\n              switchMap((newConversation) =>\n                from(newConversation.$set('members', members)).pipe(\n                  map(() => ({\n                    message: 'Conversation created successfully',\n                    data: newConversation,\n                  }))\n                )\n              )\n            );\n          })\n        );\n      }),\n      catchError((error) => throwError(() => error))\n    );\n  }\n\n  paging(payload: PagingConversationDto): Observable<any> {\n    const { offset, limit, keyword, profileId } = payload;\n\n    const whereCondition = keyword\n      ? { name: { [Op.iLike]: `%${keyword}%` } }\n      : {};\n\n    const includeCondition = {\n      association: 'members',\n      attributes: ['id', 'fullName', 'avatarUrl'],\n      where: profileId\n        ? {\n            id: {\n              [Op.in]: [profileId],\n            },\n          }\n        : undefined,\n      required: !!profileId,\n    };\n\n    return from(\n      this.conversationModel.findAndCountAll({\n        where: whereCondition,\n        include: [includeCondition],\n        offset,\n        limit,\n        order: [['updatedAt', 'DESC']],\n      })\n    ).pipe(\n      tap((result) => {\n        console.log('result.rows: ', result.rows);\n      }),\n      map((result) => ({\n        data: result.rows.map((conversation) => ({\n          id: conversation.id,\n          name: conversation.name,\n          isGroup: conversation.isGroup,\n          members: conversation.members,\n        })),\n        total: result.count,\n        message: 'Conversations retrieved successfully',\n      }))\n    );\n  }\n\n  findMembersOfConversations(payload: PagingConversationDto): Observable<any> {\n    const { profileId } = payload;\n    return from(\n      this.conversationModel.findAll({\n        include: [\n          {\n            model: Profile,\n            as: 'members',\n            attributes: ['id', 'fullName', 'avatarUrl'],\n            where: { id: profileId },\n            through: { attributes: [] },\n            required: true,\n          },\n        ],\n      })\n    ).pipe(\n      switchMap((conversations) => {\n        if (!conversations.length) {\n          return of([]);\n        }\n        const profileConversationMap = new Map<\n          number,\n          { conversationId: number; memberId: number }\n        >();\n\n        const conversationIds = conversations.map((c) => {\n          const conversation = c.toJSON<Conversation>();\n          profileConversationMap.set(conversation.id, {\n            conversationId: conversation.id,\n            memberId: conversation.members[0].id,\n          });\n          return c.id;\n        });\n\n        return from(\n          this.profileModel.findAll({\n            include: [\n              {\n                model: Conversation,\n                as: 'conversations',\n                attributes: ['id', 'name'],\n                where: {\n                  id: {\n                    [Op.in]: conversationIds,\n                  },\n                },\n                through: { attributes: [] },\n                required: true,\n              },\n            ],\n          })\n        ).pipe(\n          map((profiles) =>\n            profiles?.map?.((profile) => {\n              console.log('Each profile: ', profile.toJSON());\n              const conversationFound = profile.conversations.find((conv) =>\n                profileConversationMap.get(conv.id)\n              );\n              return {\n                lastMessage: {\n                  isSender: profile.id == profileId,\n                  avatarUrl: profile.avatarUrl,\n                  id: profile.id,\n                  fullName: profile.fullName,\n                  content: '',\n                  createdAt: new Date().toISOString(),\n                },\n                id: conversationFound.id,\n                name: conversationFound.name,\n                receiver: {\n                  id: profile.id,\n                  avatarUrl: profile.avatarUrl,\n                  bio: profile.bio,\n                  fullName: profile.fullName,\n                },\n              };\n            })\n          ),\n          map((response) => ({\n            data: response,\n            message: 'Paging successfully!',\n          }))\n        );\n      })\n    );\n  }\n\n  async delete(conversationId: number) {\n    const conversation = await this.conversationModel.findByPk(conversationId);\n    if (!conversation) {\n      throw new NotFoundException('Conversation not found');\n    }\n\n    await conversation.destroy();\n\n    return {\n      message: 'Conversation deleted successfully',\n    };\n  }\n\n  /**\n   * Fetch paginated messages for a conversation using RxJS.\n   * @param dto PagingMessageDto with offset, limit, keyword, and conversationId.\n   * @returns An Observable of paginated messages.\n   */\n  fetchPaginatedMessages(dto: PagingMessageDto) {\n    const { offset, limit, keyword, conversationId } = dto;\n\n    if (!conversationId) {\n      return throwError(\n        () => new NotFoundException('Conversation ID must be provided.')\n      );\n    }\n\n    const whereCondition: any = { conversationId };\n\n    if (keyword) {\n      whereCondition.content = { [Op.iLike]: `%${keyword}%` };\n    }\n\n    return from(\n      this.messageModel.findAndCountAll({\n        where: whereCondition,\n        order: [['createdAt', 'DESC']],\n        limit,\n        offset,\n      })\n    ).pipe(\n      map((result) => {\n        if (!result.rows.length) {\n          throw new NotFoundException(\n            `No messages found for conversation ID ${conversationId}.`\n          );\n        }\n        return {\n          data: result.rows\n            .reverse(),\n          total: result.count,\n          message: 'Messages retrieved successfully.',\n        };\n      }),\n      catchError((error) => {\n        return throwError(() => error);\n      })\n    );\n  }\n}\n","module.exports = require(\"sequelize\");","import { Controller } from '@nestjs/common';\nimport { MessagePattern } from '@nestjs/microservices';\nimport { MESSAGE_PATTERN_CONVERSATION } from '@server/shared/message-pattern';\nimport { ConversationService } from './conversation.service';\nimport {\n  CreateConversationDto,\n  PagingConversationDto,\n} from '@server/shared/dtos/conversation';\nimport { from } from 'rxjs';\nimport { PagingMessageDto } from '@server/shared/dtos/message';\n\n@Controller()\nexport class ConversationController {\n  constructor(private service: ConversationService) {}\n\n  @MessagePattern(MESSAGE_PATTERN_CONVERSATION.CREATE)\n  create(payload: CreateConversationDto) {\n    return this.service.createConversation(payload);\n  }\n\n  @MessagePattern(MESSAGE_PATTERN_CONVERSATION.DELETE)\n  delete(id: number) {\n    return from(this.service.delete(id));\n  }\n\n  @MessagePattern(MESSAGE_PATTERN_CONVERSATION.PAGING)\n  findMembersOfConversations(payload: PagingConversationDto) {\n    return this.service.findMembersOfConversations(payload);\n  }\n\n  @MessagePattern(MESSAGE_PATTERN_CONVERSATION.PAGING_MESSAGE)\n  pagingMessage(payload: PagingMessageDto) {\n    return this.service.fetchPaginatedMessages(payload);\n  }\n}\n","export * from './create-conversation.dto';\nexport * from './paging-conversation.dto';\nexport * from './join-room.dto';\nexport * from './leave-room.dto';","export class CreateConversationDto {\n  memberIds: number[];\n}\n","export class PagingConversationDto {\n  offset: number;\n  limit: number;\n  keyword?: string;\n  profileId?: number\n}","export class JoinRoomDto {\n  roomId: string;\n  userId: number;\n}\n","export class LeaveRoomDto {\n    roomId: string;\n    userId: number;\n  }\n  ","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport { Logger } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app/app.module';\nimport { MicroserviceOptions, Transport } from '@nestjs/microservices';\n\nasync function bootstrap() {\n  const app = await NestFactory.createMicroservice<MicroserviceOptions>(\n    AppModule,\n    {\n      transport: Transport.NATS,\n      options: {\n        servers: [process.env.NATS_URL],\n      },\n    }\n  );\n  await app.listen();\n  Logger.log('Chat Microservice is Running!');\n}\n\nbootstrap();\n"],"names":["module","exports","require","AppModule","Module","imports","SequelizeModule","forRoot","dialect","host","process","env","POSTGRES_HOST","port","POSTGRES_PORT","username","POSTGRES_USERNAME","password","POSTGRES_PASSWORD","database","POSTGRES_DB","models","Message","Profile","Conversation","Account","UserConversation","Friend","autoLoadModels","synchronize","ChannelModule","MessageModule","ConversationModule","controllers","providers","Model","PrimaryKey","AutoIncrement","Column","ForeignKey","defaultValue","type","DataType","DATE","NOW","Date","Table","tableName","timestamps","BelongsTo","BelongsToMany","field","HasMany","BOOLEAN","forFeature","ChannelService","ChannelController","create","console","log","join","leave","Injectable","constructor","service","this","MessagePattern","MESSAGE_PATTERN_CHANNEL","JOIN","Controller","MODULES_NAME","Object","freeze","AUTH","MICRO_SERVICE_NAMES","AUTH_SERVICE","PROFILE","MESSAGE_PATTERN_AUTH","CREATE","UPDATE","DELETE","SIGN_IN","REFRESH_TOKEN","MESSAGE_PATTERN_PROFILE","ADD_FRIEND","SEARCH_FRIEND","GET_USER_FRIENDS","CHAT_SERVICE","CHAT_MODULES_NAME","CHAT","CHANNEL","CONVERSATION","MESSAGE_PATTERN_CHAT","SEND_MESSAGE","PAGING","INTERACTION","MESSAGE_PATTERN_CONVERSATION","PAGING_MESSAGE","LEAVE","MessageController","MessageService","send","payload","Logger","senderId","content","paging","CreateMessageDto","DeleteMessageDto","PagingMessageDto","CreateMessageDtoWithReceiver","InteractionMessageDto","conversationModel","messageModel","profileModel","roomId","from","findByPk","pipe","switchMap","sender","conversation","conversationId","map","newMessage","data","message","throwError","NotFoundException","catchError","error","getConversationsByProfileId","profileId","findAll","include","association","where","id","through","attributes","InjectModel","ConversationService","ConversationController","sequelize","createConversation","memberIds","length","BadRequestException","members","model","as","existingConversation","of","name","m","fullName","newConversation","$set","offset","limit","keyword","whereCondition","Op","iLike","includeCondition","in","undefined","required","findAndCountAll","order","tap","result","rows","isGroup","total","count","findMembersOfConversations","conversations","profileConversationMap","Map","conversationIds","c","toJSON","set","memberId","profiles","profile","conversationFound","find","conv","get","lastMessage","isSender","avatarUrl","createdAt","toISOString","receiver","bio","response","destroy","fetchPaginatedMessages","dto","reverse","Sequelize","delete","pagingMessage","CreateConversationDto","PagingConversationDto","JoinRoomDto","LeaveRoomDto","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","async","app","NestFactory","createMicroservice","transport","Transport","NATS","options","servers","NATS_URL","listen","bootstrap"],"sourceRoot":""}