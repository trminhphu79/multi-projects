{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///external commonjs \"@nestjs/common\"","webpack:///external commonjs \"@nestjs/core\"","webpack:///./src/app/app.module.ts","webpack:///external commonjs \"tslib\"","webpack:///./src/app/auth/auth.module.ts","webpack:///./src/app/auth/auth.service.ts","webpack:///external commonjs \"rxjs\"","webpack:///../../../libs/server/entities/src/lib/account.entity.ts","webpack:///external commonjs \"sequelize-typescript\"","webpack:///../../../libs/server/entities/src/lib/profile.entity.ts","webpack:///../../../libs/server/entities/src/lib/conversation.entity.ts","webpack:///../../../libs/server/entities/src/lib/user-conversation.entity.ts","webpack:///../../../libs/server/entities/src/lib/friend.entity.ts","webpack:///external commonjs \"@nestjs/sequelize\"","webpack:///./src/app/auth/auth.controller.ts","webpack:///external commonjs \"@nestjs/microservices\"","webpack:///../../../libs/server/message-pattern/src/lib/auth/index.ts","webpack:///../../../libs/server/message-pattern/src/lib/auth/auth.message-pattern.ts","webpack:///../../../libs/server/message-pattern/src/lib/microservice.ts","webpack:///../../../libs/server/dtos/src/lib/account/index.ts","webpack:///../../../libs/server/dtos/src/lib/account/create-account.dto.ts","webpack:///../../../libs/server/dtos/src/lib/account/sign-in.dto.ts","webpack:///../../../libs/server/entities/src/lib/message.entity.ts","webpack:///./src/app/profile/profile.module.ts","webpack:///./src/app/profile/profile.service.ts","webpack:///external commonjs \"sequelize\"","webpack:///./src/app/profile/profile.controller.ts","webpack:///../../../libs/server/dtos/src/lib/profile/index.ts","webpack:///../../../libs/server/dtos/src/lib/profile/update-profile.dto.ts","webpack:///../../../libs/server/dtos/src/lib/profile/addfriend-profile.dto.ts","webpack:///../../../libs/server/dtos/src/lib/profile/search-friend.dto.ts","webpack:///webpack/bootstrap","webpack:///./src/main.ts"],"sourcesContent":["module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","import { Module } from '@nestjs/common';\nimport { AuthModule } from './auth/auth.module';\nimport { ProfileModule } from './profile/profile.module';\n\n@Module({\n  imports: [\n    ProfileModule,\n    AuthModule,\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n","module.exports = require(\"tslib\");","import { Global, Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { Account } from '@server/shared/entity/account';\nimport { Conversation } from '@server/shared/entity/conversation';\nimport { Message } from '@server/shared/entity/message';\nimport { Profile } from '@server/shared/entity/profile';\nimport { Friend } from '@server/shared/entity/friend';\nimport { UserConversation } from '@server/shared/entity/user-conversation';\n\n@Module({\n  providers: [AuthService],\n  controllers: [AuthController],\n  exports: [AuthService],\n  imports: [\n    SequelizeModule.forRoot({\n      dialect: 'postgres',\n      host: process.env.POSTGRES_HOST,\n      port: +process.env.POSTGRES_PORT,\n      username: process.env.POSTGRES_USERNAME,\n      password: process.env.POSTGRES_PASSWORD,\n      database: process.env.POSTGRES_DB,\n      models: [Message, Profile, Friend,Conversation, Account, UserConversation],\n      autoLoadModels: true,\n      synchronize: true,\n    }),\n    SequelizeModule.forFeature([\n      Message,\n      Profile,\n      Friend,\n      Conversation,\n      Account,\n      UserConversation,\n    ]),\n  ],\n})\nexport class AuthModule {}\n","import { BadRequestException, Injectable } from '@nestjs/common';\nimport { from, map, Observable, of, switchMap, tap, throwError } from 'rxjs';\nimport { Account } from '@server/shared/entity/account';\nimport { InjectModel } from '@nestjs/sequelize';\nimport {\n  CreateAccountDto,\n  SignInAccountDto,\n} from '@server/shared/dtos/account';\nimport { Profile } from '@server/shared/entity/profile';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectModel(Account)\n    private userModel: typeof Account,\n    @InjectModel(Profile)\n    private profileModel: typeof Profile\n  ) {}\n\n  createOne(payload: CreateAccountDto): Observable<any> {\n    return from(\n      this.userModel.findOrCreate({\n        where: { username: payload.username },\n        defaults: {\n          username: payload.username,\n          password: payload.password, // Make sure to hash the password before saving\n        },\n      })\n    ).pipe(\n      switchMap(async ([account, isCreated]) => {\n        if (!isCreated) {\n          return {\n            message: 'User already exists!',\n            data: payload,\n          };\n        }\n\n        // Create a profile for the newly created account\n        const profile = await this.profileModel.create({\n          accountId: account.id,\n          fullName: account.username || 'default-name',\n          avatarUrl: this.randomImg(),\n          bio: 'Chat with me',\n        });\n\n        const result = account.toJSON();\n        delete result.password;\n\n        return {\n          message: 'Account and profile created successfully!',\n          account: result,\n          profile,\n        };\n      })\n    );\n  }\n\n  signIn(payload: SignInAccountDto) {\n    return from(\n      this.userModel.findOne({\n        where: {\n          username: payload.username,\n          password: payload.password,\n        },\n      })\n    ).pipe(\n      switchMap((response) => {\n        if (!response) {\n          return throwError(\n            () => new BadRequestException('Invalid credentials')\n          );\n        }\n        return of(response);\n      }),\n      tap((response) => {\n        console.log('response: ', response);\n      })\n    );\n  }\n\n  randomImg(): string {\n    const images = [\n      'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTpTxZYsXlSi3QjP1ourPWa0ceS1-3qMP2yGw&s',\n      'https://wallpapershome.com/images/pages/pic_v/25654.jpg',\n      'https://imgcdn.stablediffusionweb.com/2024/9/19/c86d2133-6b44-4892-a830-a2b403df5798.jpg',\n      'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTynVaVrlGzFHaL33Qx5QVLGdNiT1bB2IgS-g&s',\n    ];\n\n    const randomIndex = Math.floor(Math.random() * images.length);\n    return images[randomIndex];\n  }\n}\n","module.exports = require(\"rxjs\");","import {\n  Column,\n  Model,\n  Table,\n  PrimaryKey,\n  AutoIncrement,\n  DataType,\n  HasMany,\n} from 'sequelize-typescript';\nimport { Profile } from './profile.entity';\n\n@Table({ tableName: 'account' })\nexport class Account extends Model {\n  @PrimaryKey\n  @AutoIncrement\n  @Column\n  override id: number;\n\n  @HasMany(() => Profile)\n  profiles: Profile[];\n\n  @Column\n  username: string;\n\n  @Column\n  password: string;\n\n  @Column({\n    type: DataType.DATE,\n    defaultValue: DataType.NOW,\n  })\n  override createdAt: Date;\n\n  @Column({\n    type: DataType.DATE,\n    defaultValue: DataType.NOW,\n  })\n  override updatedAt: Date;\n}\n","module.exports = require(\"sequelize-typescript\");","import {\n  Column,\n  Model,\n  Table,\n  PrimaryKey,\n  AutoIncrement,\n  DataType,\n  BelongsToMany,\n  BelongsTo,\n  ForeignKey,\n} from 'sequelize-typescript';\nimport { Conversation } from './conversation.entity';\nimport { Account } from './account.entity';\nimport { UserConversation } from './user-conversation.entity';\nimport { Friend } from './friend.entity';\n\n@Table({ tableName: 'profile' })\nexport class Profile extends Model {\n  @PrimaryKey\n  @AutoIncrement\n  @Column\n  override id: number;\n\n  @ForeignKey(() => Account)\n  @Column\n  accountId: number;\n\n  @BelongsTo(() => Account)\n  account: Account;\n\n  @BelongsToMany(() => Conversation, () => UserConversation)\n  conversations: Conversation[];\n\n  @Column\n  fullName: string;\n\n  @Column\n  avatarUrl: string;\n\n  @Column\n  bio: string;\n\n  @Column({\n    type: DataType.DATE,\n    defaultValue: null,\n  })\n  dob: Date;\n\n  @Column({\n    type: DataType.DATE,\n    defaultValue: DataType.NOW,\n  })\n  override createdAt: Date;\n\n  @Column({\n    type: DataType.DATE,\n    defaultValue: DataType.NOW,\n  })\n  override updatedAt: Date;\n\n  @BelongsToMany(() => Profile, () => Friend, 'profileId', 'friendId')\n  friends: Profile[];\n}\n","import {\nColumn,\nModel,\nTable,\nPrimaryKey,\nAutoIncrement,\nDataType,\nHasMany,\nBelongsToMany,\n} from 'sequelize-typescript';\nimport { Message } from './message.entity';\nimport { Profile } from './profile.entity';\nimport { UserConversation } from './user-conversation.entity';\n\n@Table({ tableName: 'conversation' })\nexport class Conversation extends Model {\n@AutoIncrement\n@PrimaryKey\n@Column\noverride id: number;\n\n@Column\nname: string;\n\n@Column({ defaultValue: false })\nisGroup: boolean;\n\n@BelongsToMany(() => Profile, () => UserConversation)\nmembers: Profile[];\n\n@Column({\n  type: DataType.DATE,\n  defaultValue: DataType.NOW,\n})\noverride createdAt: Date;\n\n@Column({\n  type: DataType.DATE,\n  defaultValue: DataType.NOW,\n})\noverride updatedAt: Date;\n}\n","import {\n  Column,\n  DataType,\n  ForeignKey,\n  Model,\n  Table,\n} from 'sequelize-typescript';\nimport { Conversation } from './conversation.entity';\nimport { Profile } from './profile.entity';\n\n@Table({ tableName: 'conversation_members' })\nexport class UserConversation extends Model {\n  @ForeignKey(() => Conversation)\n  @Column({ field: 'conversationId' })\n  conversationId: number;\n\n  @ForeignKey(() => Profile)\n  @Column({ field: 'userId' })\n  userId: number;\n\n  @Column({ defaultValue: DataType.NOW })\n  joinedAt: Date;\n}\n","import { Column, Model, Table, ForeignKey, DataType } from 'sequelize-typescript';\nimport { Profile } from './profile.entity';\n\n@Table({ tableName: 'friend' })\nexport class Friend extends Model {\n  @ForeignKey(() => Profile)\n  @Column\n  profileId: number;\n\n  @ForeignKey(() => Profile)\n  @Column\n  friendId: number;\n\n  @Column({\n    type: DataType.BOOLEAN,\n    defaultValue: false,\n  })\n  isBestFriend: boolean; // Example: Additional column to manage the type of friendship\n}\n","module.exports = require(\"@nestjs/sequelize\");","import { Controller } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { MessagePattern } from '@nestjs/microservices';\nimport { MESSAGE_PATTERN_AUTH } from '@server/shared/message-pattern/auth';\nimport { CreateAccountDto } from '@server/shared/dtos/account';\n\n@Controller()\nexport class AuthController {\n  constructor(private readonly service: AuthService) {}\n\n  @MessagePattern({ cmd: MESSAGE_PATTERN_AUTH.CREATE })\n  createAccount(body: CreateAccountDto) {\n    return this.service.createOne(body);\n  }\n\n  @MessagePattern({ cmd: MESSAGE_PATTERN_AUTH.SIGN_IN })\n  signIn(body: CreateAccountDto) {\n    return this.service.signIn(body);\n  }\n}\n","module.exports = require(\"@nestjs/microservices\");","export * from './auth.message-pattern'","import { MICRO_SERVICE_NAMES } from '../microservice';\n\nconst MODULES_NAME = Object.freeze({\n  AUTH: `${MICRO_SERVICE_NAMES.AUTH_SERVICE}/AUTH_MODULE`,\n  PROFILE: `${MICRO_SERVICE_NAMES.AUTH_SERVICE}/PROFILE_MODULE`,\n});\n\nexport const MESSAGE_PATTERN_AUTH = Object.freeze({\n  CREATE: `${MODULES_NAME.AUTH}/create`,\n  UPDATE: `${MODULES_NAME.AUTH}/update`,\n  DELETE: `${MODULES_NAME.AUTH}/delete`,\n\n  SIGN_IN: `${MODULES_NAME.AUTH}/sign-in`,\n  REFRESH_TOKEN: `${MODULES_NAME.AUTH}/refresh-token`,\n});\n\nexport const MESSAGE_PATTERN_PROFILE = Object.freeze({\n  UPDATE: `${MODULES_NAME.PROFILE}/update`,\n  ADD_FRIEND: `${MODULES_NAME.PROFILE}/add-friend`,\n  SEARCH_FRIEND: `${MODULES_NAME.PROFILE}/search-friend`,\n  GET_USER_FRIENDS: `${MODULES_NAME.PROFILE}/get-user-friend`,\n});\n","export const MICRO_SERVICE_NAMES = Object.freeze({\n  AUTH_SERVICE: 'AUTH_SERVICE',\n  CHAT_SERVICE: 'CHAT_SERVICE',\n});\n","export * from './create-account.dto';\nexport * from './sign-in.dto';","export class CreateAccountDto {\n  username: string;\n  password: string;\n}\n","export class SignInAccountDto {\n    username: string;\n    password: string;\n  }\n  ","import {\n  Column,\n  Model,\n  Table,\n  PrimaryKey,\n  AutoIncrement,\n  DataType,\n  BelongsTo,\n  ForeignKey,\n} from 'sequelize-typescript';\nimport { Profile } from './profile.entity';\nimport { Conversation } from './conversation.entity';\n\n@Table({ tableName: 'message', timestamps: true })\nexport class Message extends Model {\n  @PrimaryKey\n  @AutoIncrement\n  @Column\n  override id: number;\n\n  @ForeignKey(() => Conversation)\n  @Column\n  conversationId: number;\n\n  @ForeignKey(() => Profile)\n  @Column\n  senderId: number;\n\n  @Column\n  content: string;\n\n  @Column({ defaultValue: 'TEXT' })\n  messageType: string;\n  \n  @Column({\n    type: DataType.DATE,\n    defaultValue: DataType.NOW,\n  })\n  override createdAt: Date;\n\n  @Column({\n    type: DataType.DATE,\n    defaultValue: DataType.NOW,\n  })\n  override updatedAt: Date;\n}\n","import { Global, Module } from '@nestjs/common';\nimport { ProfileService } from './profile.service';\nimport { ProfileController } from './profile.controller';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { Account } from '@server/shared/entity/account';\nimport { Conversation } from '@server/shared/entity/conversation';\nimport { Message } from '@server/shared/entity/message';\nimport { Profile } from '@server/shared/entity/profile';\nimport { Friend } from '@server/shared/entity/friend';\nimport { UserConversation } from '@server/shared/entity/user-conversation';\n\n@Module({\n  providers: [ProfileService],\n  controllers: [ProfileController],\n  exports: [ProfileService],\n  imports: [\n    SequelizeModule.forRoot({\n      dialect: 'postgres',\n      host: process.env.POSTGRES_HOST,\n      port: +process.env.POSTGRES_PORT,\n      username: process.env.POSTGRES_USERNAME,\n      password: process.env.POSTGRES_PASSWORD,\n      database: process.env.POSTGRES_DB,\n      models: [\n        Friend,\n        Account,\n        Message,\n        Profile,\n        Conversation,\n        UserConversation,\n      ],\n      autoLoadModels: true,\n      synchronize: true,\n    }),\n    SequelizeModule.forFeature([\n      Friend,\n      Message,\n      Profile,\n      Account,\n      Conversation,\n      UserConversation,\n    ]),\n  ],\n})\nexport class ProfileModule {}\n","import {\n  BadRequestException,\n  Injectable,\n  Logger,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/sequelize';\nimport {\n  UpdateProfileDto,\n  SearchFriendDto,\n  AddFriendDto,\n} from '@server/shared/dtos/profile';\nimport { Profile } from '@server/shared/entity/profile';\nimport { Conversation } from '@server/shared/entity/conversation';\nimport { from, map } from 'rxjs';\nimport { Op } from 'sequelize';\n\n@Injectable()\nexport class ProfileService {\n  constructor(\n    @InjectModel(Profile)\n    private model: typeof Profile,\n    @InjectModel(Conversation)\n    private conversationModel: typeof Conversation\n  ) {}\n\n  updateOne(payload: UpdateProfileDto) {\n    const payloadUpdate = { ...payload };\n    delete payloadUpdate.id;\n    return from(\n      this.model.update(payloadUpdate, { where: { id: payload.id } })\n    );\n  }\n\n  async addFriend(payload: AddFriendDto) {\n    const { profileId, friendId } = payload;\n\n    const profile = await this.model.findByPk(profileId, {\n      include: { model: this.model, as: 'friends' },\n    });\n    if (!profile) {\n      throw new NotFoundException(`Profile with id ${profileId} not found`);\n    }\n    const friend = await this.model.findByPk(friendId);\n    if (!friend) {\n      throw new NotFoundException(`Profile with id ${friendId} not found`);\n    }\n\n    const isAlreadyFriend = profile.friends.some(\n      (existingFriend) => existingFriend.id === friendId\n    );\n    if (isAlreadyFriend) {\n      throw new BadRequestException(\n        `Profile with id ${friendId} is already a friend`\n      );\n    }\n\n    Logger.log(\"Add friend \" + friend.fullName + \" successfully!\");\n\n    await profile.$add('friends', friend);\n\n    const createdConversation = await this.conversationModel.create({\n      name: `Conversation between ${profileId} and ${friendId}`,\n    });\n\n    await createdConversation.$set('members', [profileId, friendId]);\n    Logger.log(\"Create conversation between \" + profile.fullName + \" and \"  + friend.fullName + \" successfully!\");\n\n    return {\n      data: friend,\n      message: 'Add friend successfully!',\n    };\n  }\n\n  searchFriend(payload: SearchFriendDto) {\n    const {\n      keyword,\n      offset = 0,\n      limit = 10,\n      sortField = 'fullName',\n      sortOrder = 'ASC',\n    } = payload;\n    return from(\n      this.model.findAndCountAll({\n        where: {\n          [Op.or]: [\n            {\n              fullName: {\n                [Op.iLike]: `%${keyword}%`, // Case-insensitive partial match\n              },\n            },\n            {\n              bio: {\n                [Op.iLike]: `%${keyword}%`,\n              },\n            },\n          ],\n        },\n        offset,\n        limit,\n        order: [[sortField, sortOrder]], // Dynamic sorting\n      })\n    ).pipe(\n      map((result) => ({\n        data: result.rows, // List of friends\n        totalCount: result.count, // Total number of matching records\n        pagination: {\n          offset,\n          limit,\n          currentPage: Math.ceil(offset / limit) + 1,\n          totalPages: Math.ceil(result.count / limit),\n        },\n        message: 'Search completed successfully!',\n      }))\n    );\n  }\n\n  getUserFriends(profileId: number) {\n    return from(\n      this.model.findOne({\n        where: { accountId: profileId },\n        include: [\n          {\n            model: Profile,\n            as: 'friends', // Alias defined in the relationship\n            through: { attributes: [] }, // Exclude the join table from the result\n          },\n        ],\n      })\n    );\n  }\n}\n","module.exports = require(\"sequelize\");","import { Controller } from '@nestjs/common';\nimport { MessagePattern } from '@nestjs/microservices';\nimport {\n  UpdateProfileDto,\n  SearchFriendDto,\n  AddFriendDto,\n} from '@server/shared/dtos/profile';\nimport { MESSAGE_PATTERN_PROFILE } from '@server/shared/message-pattern/auth';\nimport { ProfileService } from './profile.service';\nimport { from, map } from 'rxjs';\n\n@Controller()\nexport class ProfileController {\n  constructor(private service: ProfileService) {}\n\n  @MessagePattern({ cmd: MESSAGE_PATTERN_PROFILE.UPDATE })\n  updateProfile(body: UpdateProfileDto) {\n    return this.service.updateOne(body).pipe(\n      map((response) => {\n        if (response[0] > 0) {\n          return {\n            message: 'Update successfully!!',\n            data: response,\n          };\n        }\n        return {\n          message: 'Update failed!!',\n          data: null,\n        };\n      })\n    );\n  }\n\n  @MessagePattern({ cmd: MESSAGE_PATTERN_PROFILE.ADD_FRIEND })\n  addFriend(body: AddFriendDto) {\n    return from(this.service.addFriend(body)).pipe(\n      map((response) => {\n        return {\n          message: 'Addfriend successfully!!',\n          data: body,\n        };\n      })\n    );\n  }\n\n  @MessagePattern({ cmd: MESSAGE_PATTERN_PROFILE.SEARCH_FRIEND })\n  searchFriend(body: SearchFriendDto) {\n    return this.service.searchFriend(body);\n  }\n\n  @MessagePattern({ cmd: MESSAGE_PATTERN_PROFILE.GET_USER_FRIENDS })\n  getUserFriends(profileId: number) {\n    console.log('ID: ', profileId);\n    return this.service.getUserFriends(profileId).pipe();\n  }\n}\n","export * from './update-profile.dto';\nexport * from './addfriend-profile.dto';\nexport * from './search-friend.dto';","export class UpdateProfileDto {\n  id: number;\n  bio: string;\n  dob: string;\n  fullName: string;\n  avatarUrl: string;\n}\n","export class AddFriendDto {\n  profileId: number;\n  friendId: number;\n}\n","export class SearchFriendDto {\n  keyword: string;\n  offset: number;\n  limit: number;\n  sortField?: string;\n  sortOrder?: string;\n  profileId?:number\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport { Logger } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app/app.module';\nimport { MicroserviceOptions, Transport } from '@nestjs/microservices';\n\nasync function bootstrap() {\n  const app = await NestFactory.createMicroservice<MicroserviceOptions>(\n    AppModule,\n    {\n      transport: Transport.NATS,\n      options: {\n        servers: [process.env.NATS_URL],\n      },\n    }\n  );\n  await app.listen();\n  Logger.log('Auth Microservice is Running!');\n}\n\nbootstrap();\n"],"names":[],"sourceRoot":""}